{"version":3,"file":"react-src-components-Checkbox-index-story.a6919507.iframe.bundle.js","mappings":";;AA8EA;;;;;AAKA;;;;AAIA;AACA;AAGA;;AAIA;;;;;;;;;;AAUA;;;;;AAKA;;AAEA;AACA;;;;;AAOA;;;;;;;;;AASA;;AAEA;AAGA;AACA","sources":["webpack://charcoal-ui/./packages/react/src/components/Checkbox/index.tsx"],"sourcesContent":["import { forwardRef, memo, useMemo } from 'react'\nimport * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport { useCheckbox } from '@react-aria/checkbox'\nimport { useObjectRef } from '@react-aria/utils'\nimport { useToggleState } from 'react-stately'\nimport { disabledSelector, px } from '@charcoal-ui/utils'\nimport { theme } from '../../styled'\n\nimport type { AriaCheckboxProps } from '@react-types/checkbox'\nimport Icon from '../Icon'\n\ntype CheckboxLabelProps =\n  | {\n      children: React.ReactNode\n    }\n  | {\n      label: string\n    }\n\nexport type CheckboxProps = CheckboxLabelProps & {\n  readonly id?: string\n  readonly name?: string\n  readonly className?: string\n\n  readonly checked?: boolean\n  readonly defaultChecked?: boolean\n  readonly disabled?: boolean\n  readonly readonly?: boolean\n  readonly invalid?: boolean\n\n  readonly onClick?: () => void\n  readonly onChange?: (isSelected: boolean) => void\n  readonly onBlur?: () => void\n  readonly onFocus?: () => void\n}\n\nconst Checkbox = forwardRef<HTMLInputElement, CheckboxProps>(\n  function CheckboxInner({ invalid = false, ...props }, ref) {\n    const ariaCheckboxProps = useMemo<AriaCheckboxProps>(\n      () => ({\n        ...props,\n        isSelected: props.checked,\n        defaultSelected: props.defaultChecked,\n        validationState: invalid ? 'invalid' : 'valid',\n        // children がいない場合は aria-label をつけないといけない\n        'aria-label': 'children' in props ? undefined : props.label,\n        isDisabled: props.disabled,\n      }),\n      [invalid, props]\n    )\n    const state = useToggleState(ariaCheckboxProps)\n    const objectRef = useObjectRef(ref)\n\n    const { inputProps } = useCheckbox(ariaCheckboxProps, state, objectRef)\n    const isDisabled = (props.disabled ?? false) || (props.readonly ?? false)\n\n    return (\n      <InputRoot aria-disabled={isDisabled} className={props.className}>\n        <CheckboxRoot>\n          <CheckboxInput type=\"checkbox\" {...inputProps} invalid={invalid} />\n          <CheckboxInputOverlay aria-hidden={true} checked={inputProps.checked}>\n            <Icon name=\"24/Check\" unsafeNonGuidelineScale={2 / 3} />\n          </CheckboxInputOverlay>\n        </CheckboxRoot>\n\n        {'children' in props && <InputLabel>{props.children}</InputLabel>}\n      </InputRoot>\n    )\n  }\n)\n\nexport default memo(Checkbox)\n\nconst hiddenCss = css`\n  visibility: hidden;\n`\n\nconst InputRoot = styled.label`\n  position: relative;\n  display: flex;\n\n  cursor: pointer;\n  ${disabledSelector} {\n    cursor: default;\n  }\n\n  gap: ${({ theme }) => px(theme.spacing[4])};\n  ${theme((o) => [o.disabled])}\n`\n\nconst CheckboxRoot = styled.div`\n  position: relative;\n`\n\nconst CheckboxInput = styled.input<{ invalid: boolean }>`\n  &[type='checkbox'] {\n    appearance: none;\n    display: block;\n    cursor: pointer;\n    margin: 0;\n    width: 20px;\n    height: 20px;\n\n    &:checked {\n      ${theme((o) => o.bg.brand.hover.press)}\n    }\n    &:not(:checked) {\n      border-width: 2px;\n      border-style: solid;\n      border-color: ${({ theme }) => theme.color.text4};\n    }\n    ${theme((o) => [o.outline.default.focus, o.borderRadius(4)])}\n    ${(p) => p.invalid && theme((o) => [o.outline.assertive])}\n\n    /* FIXME: o.outline.default.focus の transition に o.bg.brand の transition が打ち消されてしまう */\n    transition: all 0.2s !important;\n  }\n`\n\nconst CheckboxInputOverlay = styled.div<{ checked?: boolean }>`\n  position: absolute;\n  top: -2px;\n  left: -2px;\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  ${theme((o) => [o.width.px(24), o.height.px(24), o.font.text5])}\n\n  ${({ checked }) => checked !== true && hiddenCss};\n`\n\nconst InputLabel = styled.div`\n  ${theme((o) => [o.font.text2])}\n\n  font-size: 14px;\n  /** checkbox の height が 20px なのでcheckbox と text が揃っているように見せるために行ボックスの高さを 20px にしている */\n  line-height: 20px;\n`\n"],"names":[],"sourceRoot":""}