{"version":3,"file":"react-src-components-SegmentedControl-index-story.40c57589.iframe.bundle.js","mappings":";;;;AA0HA;AAGA;;;;;;;AAOA;;;;AAIA;AASA;;;;;;;;;;;;;AAeA;;;;;AAMA;AACA","sources":["webpack://charcoal-ui/./packages/react/src/components/SegmentedControl/index.tsx"],"sourcesContent":["import { ReactNode, forwardRef, memo, useMemo, useRef } from 'react'\nimport * as React from 'react'\nimport { useRadioGroupState } from 'react-stately'\nimport {\n  AriaRadioGroupProps,\n  AriaRadioProps,\n  useRadio,\n  useRadioGroup,\n} from '@react-aria/radio'\nimport styled from 'styled-components'\nimport { disabledSelector } from '@charcoal-ui/utils'\n\nimport { RadioProvider, useRadioContext } from './RadioGroupContext'\nimport { theme } from '../../styled'\n\ntype SegmentedControlItem = {\n  label: React.ReactNode\n  value: string\n  disabled?: boolean\n}\n\nexport type SegmentedControlProps = {\n  readonly id?: string\n  readonly name?: string\n  readonly disabled?: boolean\n  readonly readonly?: boolean\n  readonly required?: boolean\n  readonly className?: string\n\n  readonly value?: string\n  readonly defaultValue?: string\n\n  readonly data: string[] | SegmentedControlItem[]\n\n  readonly onChange?: (value: string) => void\n}\n\nconst SegmentedControl = forwardRef<HTMLDivElement, SegmentedControlProps>(\n  function SegmentedControlInner(props, ref) {\n    const ariaRadioGroupProps = useMemo<AriaRadioGroupProps>(\n      () => ({\n        ...props,\n        isDisabled: props.disabled,\n        isReadOnly: props.readonly,\n        isRequired: props.required,\n        'aria-label': props.name,\n      }),\n      [props]\n    )\n    const state = useRadioGroupState(ariaRadioGroupProps)\n    const { radioGroupProps } = useRadioGroup(ariaRadioGroupProps, state)\n    const segmentedControlItems = useMemo<SegmentedControlItem[]>(() => {\n      return props.data.map((d) =>\n        typeof d === 'string' ? { value: d, label: d } : d\n      )\n    }, [props.data])\n\n    return (\n      <SegmentedControlRoot\n        ref={ref}\n        {...radioGroupProps}\n        className={props.className}\n      >\n        <RadioProvider value={state}>\n          {segmentedControlItems.map((item) => (\n            <Segmented\n              key={item.value}\n              value={item.value}\n              disabled={item.disabled}\n            >\n              {item.label}\n            </Segmented>\n          ))}\n        </RadioProvider>\n      </SegmentedControlRoot>\n    )\n  }\n)\n\nexport default memo(SegmentedControl)\n\ntype RadioProps = {\n  value: string\n  disabled?: boolean\n  children?: ReactNode\n}\n\nconst Segmented = (props: RadioProps) => {\n  const state = useRadioContext()\n  const ref = useRef<HTMLInputElement>(null)\n  const ariaRadioProps = useMemo<AriaRadioProps>(\n    () => ({\n      value: props.value,\n      isDisabled: props.disabled,\n      children: props.children,\n    }),\n    [props]\n  )\n\n  const { inputProps, isDisabled, isSelected } = useRadio(\n    ariaRadioProps,\n    state,\n    ref\n  )\n\n  return (\n    <SegmentedRoot\n      aria-disabled={isDisabled || state.isReadOnly}\n      checked={isSelected}\n    >\n      <SegmentedInput {...inputProps} ref={ref} />\n      <RadioLabel>\n        <SegmentedLabelInner>{props.children}</SegmentedLabelInner>\n      </RadioLabel>\n    </SegmentedRoot>\n  )\n}\n\nconst SegmentedControlRoot = styled.div`\n  display: inline-flex;\n  align-items: center;\n\n  ${theme((o) => [o.bg.surface3, o.borderRadius(16)])}\n`\n\nconst SegmentedRoot = styled.label<{ checked?: boolean }>`\n  position: relative;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  height: 32px;\n\n  ${disabledSelector} {\n    cursor: default;\n  }\n\n  ${({ checked }) =>\n    theme((o) => [\n      o.padding.horizontal(16),\n      o.borderRadius(16),\n      o.disabled,\n      checked === true && o.bg.brand,\n      checked === true ? o.font.text5 : o.font.text2,\n    ])}\n`\nconst SegmentedInput = styled.input`\n  position: absolute;\n\n  height: 0px;\n  width: 0px;\n  padding: 0;\n  margin: 0;\n\n  appearance: none;\n  box-sizing: border-box;\n  overflow: hidden;\n  white-space: nowrap;\n  opacity: 0;\n`\n\nconst RadioLabel = styled.div`\n  background: transparent;\n  display: flex;\n  align-items: center;\n  height: 22px;\n`\nconst SegmentedLabelInner = styled.div`\n  ${theme((o) => [o.typography(14)])}\n`\n"],"names":[],"sourceRoot":""}