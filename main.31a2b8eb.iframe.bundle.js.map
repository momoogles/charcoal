{"version":3,"file":"main.31a2b8eb.iframe.bundle.js","mappings":";AAKA;AAUA;;AACA;AAGA;;AACA;;;AAEA;;AAIA;AAEA;AAEA;;AACA;;;AAgBA","sources":["webpack://charcoal-ui/../src/TokenInjector.tsx"],"sourcesContent":["import { createGlobalStyle, css } from 'styled-components'\nimport { CharcoalAbstractTheme } from '@charcoal-ui/theme'\nimport { defineThemeVariables, withPrefixes } from './util'\nimport { mapObject } from '@charcoal-ui/utils'\n\nconst GlobalStyle = createGlobalStyle`\n  ${<T extends Theme>({\n    themeMap,\n    background,\n  }: {\n    themeMap: ThemeMap<T>\n    background?: keyof ThemeMap<T>[string]['color']\n  }) =>\n    Object.entries(themeMap).map(([key, theme]) =>\n      key.startsWith('@media')\n        ? css`\n            ${key} {\n              :root {\n                ${background !== undefined &&\n                css`\n                  background-color: ${theme.color[background]};\n                `}\n                ${defineColorVariableCSS(theme)}\n              }\n            }\n          `\n        : css`\n            /* stylelint-disable-next-line no-duplicate-selectors */\n            ${key} {\n              ${background !== undefined &&\n              css`\n                background-color: ${theme.color[background]};\n              `}\n              ${defineColorVariableCSS(theme)}\n            }\n          `\n    )}\n`\n\nexport interface ThemeMap<T extends Theme> {\n  ':root': T\n  [mediaQuery: `@media (${string})`]: T\n  [selector: string]: T\n}\n\ntype Theme = Pick<CharcoalAbstractTheme, 'color' | 'effect' | 'border'>\n\nexport default function TokenInjector<T extends Theme>({\n  theme: themeMap,\n  background,\n}: {\n  theme: ThemeMap<T>\n  background?: keyof ThemeMap<T>[string]['color']\n}) {\n  return <GlobalStyle themeMap={themeMap} background={background} />\n}\n\nconst defineColorVariableCSS = (theme: Theme) => {\n  const borders = mapObject(theme.border, (name, { color }) => [\n    // REVIEW: もしtheme.colorにたまたまborder-〇〇で始まる色名がいたら被りうる\n    withPrefixes('border', name),\n    color,\n  ])\n\n  const colors = defineThemeVariables({ ...theme.color, ...borders })({ theme })\n\n  return toCSSVariables(colors)\n}\n\nfunction toCSSVariables(css: Record<string, string | number>) {\n  return Object.entries(css)\n    .map(([varName, value]) => variableDefinition(varName, value.toString()))\n    .join(';')\n}\n\nconst variableDefinition = (prop: string, value: string) => `${prop}: ${value}`\n"],"names":[],"sourceRoot":""}