{"version":3,"file":"react-src-components-Button-index-story.b685a2e8.iframe.bundle.js","mappings":";AAiDA;;;;;;;;AAQA;;;AAYA;AAGA;;;;ACpBA;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AAGA;;;;;;;;;;;;AAYA","sources":["webpack://charcoal-ui/./packages/react/src/components/Button/index.tsx","webpack://charcoal-ui/./packages/react/src/components/Clickable/index.tsx"],"sourcesContent":["import { forwardRef } from 'react'\nimport styled from 'styled-components'\nimport { unreachable } from '../../_lib'\nimport { theme } from '../../styled'\nimport Clickable, { ClickableElement, ClickableProps } from '../Clickable'\n\ntype Variant = 'Primary' | 'Default' | 'Overlay' | 'Danger' | 'Navigation'\ntype Size = 'S' | 'M'\n\ninterface StyledProps {\n  $variant: Variant\n  $fullWidth: boolean\n  $size: Size\n}\n\nexport type ButtonProps = Partial<{\n  variant: Variant\n  size: Size\n  fullWidth: boolean\n}> &\n  ClickableProps\n\nconst Button = forwardRef<ClickableElement, ButtonProps>(function Button(\n  {\n    children,\n    variant = 'Default',\n    size = 'M',\n    fullWidth: fixed = false,\n    disabled = false,\n    ...rest\n  },\n  ref\n) {\n  return (\n    <StyledButton\n      {...rest}\n      disabled={disabled}\n      $variant={variant}\n      $size={size}\n      $fullWidth={fixed}\n      ref={ref}\n    >\n      {children}\n    </StyledButton>\n  )\n})\nexport default Button\n\nconst StyledButton = styled(Clickable)<StyledProps>`\n  width: ${(p) => (p.$fullWidth ? 'stretch' : 'min-content')};\n  display: inline-grid;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  user-select: none;\n  white-space: nowrap;\n\n  ${(p) =>\n    theme((o) => [\n      o.font[variantToFont(p.$variant)].hover.press,\n      o.bg[variantToBackground(p.$variant)].hover.press,\n      o.typography(14).bold.preserveHalfLeading,\n      o.padding.horizontal(p.$size === 'M' ? 24 : 16),\n      o.disabled,\n      o.borderRadius('oval'),\n      o.outline.default.focus,\n    ])}\n\n  /* よく考えたらheight=32って定義が存在しないな... */\n  height: ${(p) => (p.$size === 'M' ? 40 : 32)}px;\n`\n\nfunction variantToBackground(variant: Variant) {\n  switch (variant) {\n    case 'Overlay':\n      return 'surface4'\n    case 'Default':\n      return 'surface3'\n    case 'Primary':\n      return 'brand'\n    case 'Navigation':\n      return 'surface6'\n    case 'Danger':\n      return 'assertive'\n    default:\n      return unreachable(variant)\n  }\n}\n\nfunction variantToFont(variant: Variant) {\n  switch (variant) {\n    case 'Overlay':\n      return 'text5'\n    case 'Default':\n      return 'text2'\n    case 'Primary':\n      return 'text5'\n    case 'Navigation':\n      return 'text5'\n    case 'Danger':\n      return 'text5'\n    default:\n      return unreachable(variant)\n  }\n}\n","import * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport {\n  LinkProps,\n  useComponentAbstraction,\n} from '../../core/ComponentAbstraction'\nimport { disabledSelector } from '@charcoal-ui/utils'\n\ninterface BaseProps {\n  /**\n   * クリックの無効化\n   */\n  disabled?: boolean\n}\n\ninterface LinkBaseProps {\n  /**\n   * リンクのURL。指定するとbuttonタグではなくaタグとして描画される\n   */\n  to: string\n}\n\nexport type ClickableProps =\n  | (BaseProps & Omit<React.ComponentPropsWithoutRef<'button'>, 'disabled'>)\n  | (BaseProps & LinkBaseProps & Omit<LinkProps, 'to'>)\nexport type ClickableElement = HTMLButtonElement & HTMLAnchorElement\n\nconst Clickable = React.forwardRef<ClickableElement, ClickableProps>(\n  function Clickable(props, ref) {\n    const { Link } = useComponentAbstraction()\n    if ('to' in props) {\n      const { onClick, disabled = false, ...rest } = props\n      return (\n        <A<typeof Link>\n          {...rest}\n          as={disabled ? undefined : Link}\n          onClick={disabled ? undefined : onClick}\n          aria-disabled={disabled}\n          ref={ref}\n        />\n      )\n    } else {\n      return <Button {...props} ref={ref} />\n    }\n  }\n)\nexport default Clickable\n\nconst clickableCss = css`\n  /* Clickable style */\n  cursor: pointer;\n\n  ${disabledSelector} {\n    cursor: default;\n  }\n`\n\nconst Button = styled.button`\n  /* Reset button appearance */\n  appearance: none;\n  background: transparent;\n  padding: 0;\n  border-style: none;\n  outline: none;\n  color: inherit;\n  text-rendering: inherit;\n  letter-spacing: inherit;\n  word-spacing: inherit;\n\n  &:focus {\n    outline: none;\n  }\n\n  /* Change the font styles in all browsers. */\n  font: inherit;\n\n  /* Remove the margin in Firefox and Safari. */\n  margin: 0;\n\n  /* Show the overflow in Edge. */\n  overflow: visible;\n\n  /* Remove the inheritance of text transform in Firefox. */\n  text-transform: none;\n\n  /* Remove the inner border and padding in Firefox. */\n  &::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n\n  ${clickableCss}\n`\n\nconst A = styled.span`\n  /* Reset a-tag appearance */\n  color: inherit;\n\n  &:focus {\n    outline: none;\n  }\n\n  .text {\n    top: calc(1em + 2em);\n  }\n\n  ${clickableCss}\n`\n"],"names":[],"sourceRoot":""}