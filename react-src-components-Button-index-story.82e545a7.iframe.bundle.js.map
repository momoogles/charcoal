{"version":3,"file":"react-src-components-Button-index-story.82e545a7.iframe.bundle.js","mappings":";;;AAoDA;;;AASA;AACA;;;;;;;;;;;;AAYA;;AAEA;AACA;;;;;;;;;;;;;AAaA;AACA;;;AAGA;AACA;;;;;;;;;;AAUA;AAGA;;;ACvDA","sources":["webpack://charcoal-ui/./packages/react/src/components/Button/index.tsx","webpack://charcoal-ui/./packages/react/src/components/Clickable/index.tsx"],"sourcesContent":["import { forwardRef } from 'react'\nimport styled, { css } from 'styled-components'\nimport { unreachable } from '../../_lib'\nimport Clickable, { ClickableElement, ClickableProps } from '../Clickable'\n\ntype Variant = 'Primary' | 'Default' | 'Overlay' | 'Danger' | 'Navigation'\ntype Size = 'S' | 'M'\n\ninterface StyledProps {\n  $variant: Variant\n  $fullWidth: boolean\n  $size: Size\n}\n\nexport type ButtonProps = Partial<{\n  variant: Variant\n  size: Size\n  fullWidth: boolean\n}> &\n  ClickableProps\n\nconst Button = forwardRef<ClickableElement, ButtonProps>(function Button(\n  {\n    children,\n    variant = 'Default',\n    size = 'M',\n    fullWidth: fixed = false,\n    disabled = false,\n    ...rest\n  },\n  ref\n) {\n  return (\n    <StyledButton\n      {...rest}\n      disabled={disabled}\n      $background={variantToBackground(variant)}\n      $color={variantToFont(variant)}\n      $size={size}\n      $fullWidth={fixed}\n      ref={ref}\n    >\n      {children}\n    </StyledButton>\n  )\n})\nexport default Button\n\nconst horizontalPaddingSmall = css`\n  padding-right: 16px;\n  padding-left: 16px;\n`\nconst horizontalPaddingMedium = css`\n  padding-right: 24px;\n  padding-left: 24px;\n`\n\ntype StyledButtonProps = Omit<StyledProps, '$variant'> & {\n  $background: ReturnType<typeof variantToBackground>\n  $color: ReturnType<typeof variantToFont>\n}\nconst StyledButton = styled(Clickable)<StyledButtonProps>`\n  width: ${(p) => (p.$fullWidth ? 'stretch' : 'min-content')};\n  display: inline-grid;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  user-select: none;\n  white-space: nowrap;\n  border-radius: 999999px;\n  font-size: 14px;\n  line-height: 22px;\n  font-weight: bold;\n\n  ${(p) => (p.$size === 'M' ? horizontalPaddingMedium : horizontalPaddingSmall)}\n\n  color: var(--charcoal-${(p) => p.$color});\n  background-color: var(--charcoal-${(p) => p.$background});\n  transition: 0.2s color, 0.2s background-color, 0.2s box-shadow;\n\n  &:not(:disabled):not([aria-disabled]),\n  &[aria-disabled='false'] {\n    &:active,\n    &:focus,\n    &:focus-visible {\n      outline: none;\n      box-shadow: 0 0 0 4px rgba(0, 150, 250, 0.32);\n    }\n\n    &:hover {\n      color: var(--charcoal-${(p) => p.$color}-hover);\n      background-color: var(--charcoal-${(p) => p.$background}-hover);\n    }\n    &:active {\n      color: var(--charcoal-${(p) => p.$color}-press);\n      background-color: var(--charcoal-${(p) => p.$background}-press);\n    }\n  }\n\n  &:disabled,\n  &[aria-disabled]:not([aria-disabled='false']) {\n    opacity: 0.32;\n  }\n\n  /* よく考えたらheight=32って定義が存在しないな... */\n  height: ${(p) => (p.$size === 'M' ? 40 : 32)}px;\n`\n\nfunction variantToBackground(variant: Variant) {\n  switch (variant) {\n    case 'Overlay':\n      return 'surface4'\n    case 'Default':\n      return 'surface3'\n    case 'Primary':\n      return 'brand'\n    case 'Navigation':\n      return 'surface6'\n    case 'Danger':\n      return 'assertive'\n    default:\n      return unreachable(variant)\n  }\n}\n\nfunction variantToFont(variant: Variant) {\n  switch (variant) {\n    case 'Overlay':\n      return 'text5'\n    case 'Default':\n      return 'text2'\n    case 'Primary':\n      return 'text5'\n    case 'Navigation':\n      return 'text5'\n    case 'Danger':\n      return 'text5'\n    default:\n      return unreachable(variant)\n  }\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport {\n  LinkProps,\n  useComponentAbstraction,\n} from '../../core/ComponentAbstraction'\nimport { disabledSelector } from '@charcoal-ui/utils'\n\ninterface BaseProps {\n  /**\n   * クリックの無効化\n   */\n  disabled?: boolean\n}\n\ninterface LinkBaseProps {\n  /**\n   * リンクのURL。指定するとbuttonタグではなくaタグとして描画される\n   */\n  to: string\n}\n\nexport type ClickableProps =\n  | (BaseProps & Omit<React.ComponentPropsWithoutRef<'button'>, 'disabled'>)\n  | (BaseProps & LinkBaseProps & Omit<LinkProps, 'to'>)\nexport type ClickableElement = HTMLButtonElement & HTMLAnchorElement\n\nconst Clickable = React.forwardRef<ClickableElement, ClickableProps>(\n  function Clickable(props, ref) {\n    const { Link } = useComponentAbstraction()\n    const isLink = 'to' in props\n    const as = isLink ? Link : 'button'\n    const ariaDisabled = isLink && props.disabled === true ? true : undefined\n    let rest = props\n    if (isLink) {\n      const { disabled, ..._rest } = props\n      rest = _rest\n    }\n    return (\n      <StyledClickableDiv\n        {...rest}\n        ref={ref}\n        as={as}\n        aria-disabled={ariaDisabled}\n      />\n    )\n  }\n)\nexport default Clickable\n\nconst StyledClickableDiv = styled.div`\n  cursor: pointer;\n\n  ${disabledSelector} {\n    cursor: default;\n  }\n\n  /* Reset button appearance */\n  appearance: none;\n  background: transparent;\n  padding: 0;\n  border-style: none;\n  outline: none;\n  color: inherit;\n  text-rendering: inherit;\n  letter-spacing: inherit;\n  word-spacing: inherit;\n\n  &:focus {\n    outline: none;\n  }\n\n  /* Change the font styles in all browsers. */\n  font: inherit;\n\n  /* Remove the margin in Firefox and Safari. */\n  margin: 0;\n\n  /* Show the overflow in Edge. */\n  overflow: visible;\n\n  /* Remove the inheritance of text transform in Firefox. */\n  text-transform: none;\n\n  /* Remove the inner border and padding in Firefox. */\n  &::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n`\n"],"names":[],"sourceRoot":""}