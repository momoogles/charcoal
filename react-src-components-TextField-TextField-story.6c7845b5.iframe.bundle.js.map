{"version":3,"file":"react-src-components-TextField-TextField-story.6c7845b5.iframe.bundle.js","mappings":";;;;;;;;;;AAqDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACYA;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;;AAIA;;;;AAIA;;;;;;ACzFA;AACA;;;;AAIA;AACA;;;;;;;;AAQA;;;;;AAKA;;;;;;;;;;;;;;;AAwBA;;;;ACyEA;AAGA;;AAIA;;AAMA;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;AAMA;;;AAGA;;;AAOA;;;AAKA;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;AAMA;;;;;AAKA","sources":["webpack://charcoal-ui/./packages/react/src/components/Clickable/index.tsx","webpack://charcoal-ui/./packages/react/src/components/FieldLabel/index.tsx","webpack://charcoal-ui/./packages/react/src/components/IconButton/index.tsx","webpack://charcoal-ui/./packages/react/src/components/TextField/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport styled from 'styled-components'\nimport {\n  LinkProps,\n  useComponentAbstraction,\n} from '../../core/ComponentAbstraction'\nimport { disabledSelector } from '@charcoal-ui/utils'\n\ninterface BaseProps {\n  /**\n   * クリックの無効化\n   */\n  disabled?: boolean\n}\n\ninterface LinkBaseProps {\n  /**\n   * リンクのURL。指定するとbuttonタグではなくaタグとして描画される\n   */\n  to: string\n}\n\nexport type ClickableProps =\n  | (BaseProps & Omit<React.ComponentPropsWithoutRef<'button'>, 'disabled'>)\n  | (BaseProps & LinkBaseProps & Omit<LinkProps, 'to'>)\nexport type ClickableElement = HTMLButtonElement & HTMLAnchorElement\n\nconst Clickable = React.forwardRef<ClickableElement, ClickableProps>(\n  function Clickable(props, ref) {\n    const { Link } = useComponentAbstraction()\n    const isLink = 'to' in props\n    const as = isLink ? Link : 'button'\n    const ariaDisabled = isLink && props.disabled === true ? true : undefined\n    let rest = props\n    if (isLink) {\n      const { disabled, ..._rest } = props\n      rest = _rest\n    }\n    return (\n      <StyledClickableDiv\n        {...rest}\n        ref={ref}\n        as={as}\n        aria-disabled={ariaDisabled}\n      />\n    )\n  }\n)\nexport default Clickable\n\nconst StyledClickableDiv = styled.div`\n  cursor: pointer;\n\n  ${disabledSelector} {\n    cursor: default;\n  }\n\n  /* Reset button appearance */\n  appearance: none;\n  background: transparent;\n  padding: 0;\n  border-style: none;\n  outline: none;\n  color: inherit;\n  text-rendering: inherit;\n  letter-spacing: inherit;\n  word-spacing: inherit;\n  text-decoration: none;\n\n  &:focus {\n    outline: none;\n  }\n\n  /* Change the font styles in all browsers. */\n  font: inherit;\n\n  /* Remove the margin in Firefox and Safari. */\n  margin: 0;\n\n  /* Show the overflow in Edge. */\n  overflow: visible;\n\n  /* Remove the inheritance of text transform in Firefox. */\n  text-transform: none;\n\n  /* Remove the inner border and padding in Firefox. */\n  &::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n`\n","import * as React from 'react'\nimport styled from 'styled-components'\n\nexport interface FieldLabelProps\n  extends React.LabelHTMLAttributes<HTMLLabelElement> {\n  readonly className?: string\n  readonly label: string\n  readonly subLabel?: React.ReactNode\n  readonly required?: boolean\n  // TODO: 翻訳用のContextで注入する\n  readonly requiredText?: string\n}\n\nconst FieldLabel = React.forwardRef<HTMLLabelElement, FieldLabelProps>(\n  function FieldLabel(\n    {\n      style,\n      className,\n      label,\n      required = false,\n      requiredText,\n      subLabel,\n      ...labelProps\n    },\n    ref\n  ) {\n    return (\n      <FieldLabelWrapper style={style} className={className}>\n        <Label ref={ref} {...labelProps}>\n          {label}\n        </Label>\n        {required && <RequiredText>{requiredText}</RequiredText>}\n        <SubLabelClickable>\n          <span>{subLabel}</span>\n        </SubLabelClickable>\n      </FieldLabelWrapper>\n    )\n  }\n)\n\nexport default FieldLabel\n\nconst Label = styled.label`\n  font-size: 14px;\n  line-height: 22px;\n  font-weight: bold;\n  display: flow-root;\n  color: var(--charcoal-text1);\n\n  &::before {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-top: -4px;\n  }\n  &::after {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-bottom: -4px;\n  }\n`\n\nconst RequiredText = styled.span`\n  font-size: 14px;\n  line-height: 22px;\n  display: flow-root;\n  color: var(--charcoal-text2);\n\n  &::before {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-top: -4px;\n  }\n  &::after {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-bottom: -4px;\n  }\n`\n\nconst SubLabelClickable = styled.div`\n  font-size: 14px;\n  line-height: 22px;\n  display: flow-root;\n  color: var(--charcoal-text3);\n  transition: 0.2s color, 0.2s box-shadow;\n\n  &::before {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-top: -4px;\n  }\n  &::after {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-bottom: -4px;\n  }\n\n  &:not(:disabled):not([aria-disabled]),\n  &[aria-disabled='false'] {\n    &:hover {\n      color: var(--charcoal-text3-hover);\n    }\n    &:active {\n      color: var(--charcoal-text3-press);\n    }\n    &:active,\n    &:focus,\n    &:focus-visible {\n      outline: none;\n      box-shadow: 0 0 0 4px rgba(0, 150, 250, 0.32);\n    }\n  }\n`\n\nconst FieldLabelWrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n\n  > ${RequiredText} {\n    margin-left: 4px;\n  }\n\n  > ${SubLabelClickable} {\n    margin-left: auto;\n  }\n`\n","import { forwardRef } from 'react'\nimport styled from 'styled-components'\nimport Clickable, { ClickableElement, ClickableProps } from '../Clickable'\nimport type { KnownIconType } from '@charcoal-ui/icons'\n\ntype Variant = 'Default' | 'Overlay'\ntype Size = 'XS' | 'S' | 'M'\n\ninterface StyledProps {\n  readonly variant?: Variant\n  readonly size?: Size\n  readonly icon: keyof KnownIconType\n}\n\nexport type IconButtonProps = StyledProps & ClickableProps\n\nconst IconButton = forwardRef<ClickableElement, IconButtonProps>(\n  function IconButtonInner(\n    { variant = 'Default', size = 'M', icon, ...rest }: IconButtonProps,\n    ref\n  ) {\n    validateIconSize(size, icon)\n    return (\n      <StyledIconButton {...rest} ref={ref} $size={size} $variant={variant}>\n        <pixiv-icon name={icon} />\n      </StyledIconButton>\n    )\n  }\n)\n\nexport default IconButton\n\ntype StyledIconButtonProps = Required<{\n  [key in keyof Pick<\n    StyledProps,\n    'size' | 'variant'\n  > as `$${key}`]: StyledProps[key]\n}>\n\nconst StyledIconButton = styled(Clickable).attrs<\n  StyledIconButtonProps,\n  ReturnType<typeof styledProps>\n>(styledProps)<StyledIconButtonProps>`\n  user-select: none;\n\n  width: ${(p) => p.$width}px;\n  height: ${(p) => p.$height}px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(${({ $font }) => `--charcoal-${$font}`});\n  background-color: var(${({ $background }) => `--charcoal-${$background}`});\n  border-radius: 999999px;\n  transition: 0.2s background-color, 0.2s box-shadow;\n\n  &:not(:disabled):not([aria-disabled]),\n  &[aria-disabled='false'] {\n    &:hover {\n      background-color: var(\n        ${({ $background }) => `--charcoal-${$background}-hover`}\n      );\n    }\n    &:active {\n      background-color: var(\n        ${({ $background }) => `--charcoal-${$background}-press`}\n      );\n    }\n    &:focus,\n    &:active,\n    &:focus-visible {\n      outline: none;\n      box-shadow: 0 0 0 4px rgba(0, 150, 250, 0.32);\n    }\n  }\n\n  &:disabled,\n  &[aria-disabled]:not([aria-disabled='false']) {\n    opacity: 0.32;\n  }\n`\n\nfunction styledProps({ $size, $variant }: StyledIconButtonProps) {\n  return {\n    ...variantToProps($variant),\n    ...sizeToProps($size),\n  }\n}\n\nfunction variantToProps(variant: Variant) {\n  switch (variant) {\n    case 'Default':\n      return { $font: 'text3', $background: 'transparent' } as const\n    case 'Overlay':\n      return { $font: 'text5', $background: 'surface4' } as const\n  }\n}\n\nfunction sizeToProps(size: Size) {\n  switch (size) {\n    case 'XS':\n      return {\n        $width: 20,\n        $height: 20,\n      }\n    case 'S':\n      return {\n        $width: 32,\n        $height: 32,\n      }\n    case 'M':\n      return {\n        $width: 40,\n        $height: 40,\n      }\n  }\n}\n\n/**\n * validates matches of size and icon\n */\nfunction validateIconSize(size: Size, icon: keyof KnownIconType) {\n  let requiredIconSize: string\n  switch (size) {\n    case 'XS':\n      requiredIconSize = '16'\n      break\n    case 'S':\n    case 'M':\n      requiredIconSize = '24'\n      break\n  }\n  // アイコン名は サイズ/名前\n  const result = /^\\d*/u.exec(icon)\n  if (result == null) {\n    throw new Error('Invalid icon name')\n  }\n  const [iconSize] = result\n  if (iconSize !== requiredIconSize) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `IconButton with size \"${size}\" expect icon size \"${requiredIconSize}, but got \"${iconSize}\"`\n    )\n  }\n}\n","import { useTextField } from '@react-aria/textfield'\nimport { useVisuallyHidden } from '@react-aria/visually-hidden'\nimport { ReactNode, useCallback, useEffect, useRef, useState } from 'react'\nimport * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport FieldLabel, { FieldLabelProps } from '../FieldLabel'\nimport { countCodePointsInString, mergeRefs } from '../../_lib'\nimport { ReactAreaUseTextFieldCompat } from '../../_lib/compat'\nimport { useFocusWithClick } from './useFocusWithClick'\n\ntype DOMProps = Omit<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  // react-ariaのhookは、onChangeが`(v: string) => void`想定\n  | 'onChange'\n\n  // RDFa Attributeとかぶる\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/58d57ca87ac7be0d306c0844dc254e90c150bd0d/types/react/index.d.ts#L1951\n  | 'prefix'\n\n  // ReactAreaUseTextFieldCompatに書いてあるような事情で、ここにあるイベントハンドラの型をゆるめる\n  | keyof ReactAreaUseTextFieldCompat\n>\n\nexport interface TextFieldProps\n  extends Pick<FieldLabelProps, 'label' | 'requiredText' | 'subLabel'>,\n    DOMProps,\n    ReactAreaUseTextFieldCompat {\n  readonly prefix?: ReactNode\n  readonly suffix?: ReactNode\n\n  // <input> 要素は number とか string[] もありうるが、今はこれしか想定してない\n  readonly defaultValue?: string\n  readonly value?: string\n  readonly onChange?: (value: string) => void\n\n  // react-ariaの型定義のせいでHTMLInputElementにできない\n  readonly onKeyDown?: (event: React.KeyboardEvent<Element>) => void\n  readonly onFocus?: (event: React.FocusEvent<Element>) => void\n  readonly onBlur?: (event: React.FocusEvent<Element>) => void\n\n  readonly showCount?: boolean\n  readonly showLabel?: boolean\n  readonly assistiveText?: string\n  readonly invalid?: boolean\n}\n\nconst TextField = React.forwardRef<HTMLInputElement, TextFieldProps>(\n  function SingleLineTextFieldInner({ onChange, ...props }, forwardRef) {\n    const {\n      className,\n      showLabel = false,\n      showCount = false,\n      label,\n      requiredText,\n      subLabel,\n      disabled = false,\n      required,\n      invalid = false,\n      assistiveText,\n      maxLength,\n      prefix = null,\n      suffix = null,\n    } = props\n\n    const { visuallyHiddenProps } = useVisuallyHidden()\n    const ariaRef = useRef<HTMLInputElement>(null)\n    const [count, setCount] = useState(\n      countCodePointsInString(props.value ?? '')\n    )\n\n    const nonControlled = props.value === undefined\n    const handleChange = useCallback(\n      (value: string) => {\n        const count = countCodePointsInString(value)\n        if (maxLength !== undefined && count > maxLength) {\n          return\n        }\n        if (nonControlled) {\n          setCount(count)\n        }\n        onChange?.(value)\n      },\n      [maxLength, nonControlled, onChange]\n    )\n\n    useEffect(() => {\n      setCount(countCodePointsInString(props.value ?? ''))\n    }, [props.value])\n\n    const { inputProps, labelProps, descriptionProps, errorMessageProps } =\n      useTextField(\n        {\n          inputElementType: 'input',\n          isDisabled: disabled,\n          isRequired: required,\n          validationState: invalid ? 'invalid' : 'valid',\n          description: !invalid && assistiveText,\n          errorMessage: invalid && assistiveText,\n          onChange: handleChange,\n          ...props,\n        },\n        ariaRef\n      )\n\n    const containerRef = useRef(null)\n\n    useFocusWithClick(containerRef, ariaRef)\n\n    return (\n      <TextFieldRoot className={className} isDisabled={disabled}>\n        <TextFieldLabel\n          label={label}\n          requiredText={requiredText}\n          required={required}\n          subLabel={subLabel}\n          {...labelProps}\n          {...(!showLabel ? visuallyHiddenProps : {})}\n        />\n        <StyledInputContainer\n          ref={containerRef}\n          invalid={invalid}\n          aria-disabled={disabled === true ? true : undefined}\n          hasPrefix={prefix != null}\n          hasSuffix={suffix != null || showCount}\n        >\n          {prefix && <PrefixContainer>{prefix}</PrefixContainer>}\n          <StyledInput\n            ref={mergeRefs(forwardRef, ariaRef)}\n            invalid={invalid}\n            {...inputProps}\n          />\n          {(suffix || showCount) && (\n            <SuffixContainer>\n              {suffix}\n              {showCount && (\n                <SingleLineCounter>\n                  {maxLength !== undefined ? `${count}/${maxLength}` : count}\n                </SingleLineCounter>\n              )}\n            </SuffixContainer>\n          )}\n        </StyledInputContainer>\n        {assistiveText != null && assistiveText.length !== 0 && (\n          <AssistiveText\n            invalid={invalid}\n            {...(invalid ? errorMessageProps : descriptionProps)}\n          >\n            {assistiveText}\n          </AssistiveText>\n        )}\n      </TextFieldRoot>\n    )\n  }\n)\n\nexport default TextField\n\nconst TextFieldRoot = styled.div<{ isDisabled: boolean }>`\n  display: flex;\n  flex-direction: column;\n\n  ${(p) => p.isDisabled && { opacity: p.theme.elementEffect.disabled.opacity }}\n`\n\nexport const TextFieldLabel = styled(FieldLabel)`\n  margin-bottom: 8px;\n`\n\nconst StyledInputContainer = styled.div<{\n  invalid: boolean\n  hasPrefix: boolean\n  hasSuffix: boolean\n}>`\n  display: grid;\n  grid-template-columns: ${(p) =>\n    [p.hasPrefix && 'auto', '1fr', p.hasSuffix && 'auto']\n      .filter(Boolean)\n      .join(' ')};\n  height: 40px;\n  transition: 0.2s background-color, 0.2s box-shadow;\n  color: var(--charcoal-text2);\n  background-color: var(--charcoal-surface3);\n  border-radius: 4px;\n  gap: 4px;\n  padding: 0 8px;\n  line-height: 22px;\n  font-size: 14px;\n\n  :not(:disabled):not([aria-disabled]):hover,\n  [aria-disabled='false']:hover {\n    background-color: var(--charcoal-surface3-hover);\n  }\n\n  :not(:disabled):not([aria-disabled]):active,\n  [aria-disabled='false']:active {\n    outline: none;\n    box-shadow: 0 0 0 4px\n      ${(p) => (p.invalid ? `rgba(255,43,0,0.32)` : `rgba(0, 150, 250, 0.32);`)};\n  }\n\n  :focus-within {\n    outline: none;\n    box-shadow: 0 0 0 4px\n      ${(p) => (p.invalid ? `rgba(255,43,0,0.32)` : `rgba(0, 150, 250, 0.32);`)};\n  }\n\n  ${(p) =>\n    p.invalid &&\n    css`\n      box-shadow: 0 0 0 4px rgba(255, 43, 0, 0.32);\n    `}\n`\n\nconst PrefixContainer = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst SuffixContainer = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`\n\nconst StyledInput = styled.input<{\n  invalid: boolean\n}>`\n  border: none;\n  box-sizing: border-box;\n  outline: none;\n  font-family: inherit;\n\n  /* Prevent zooming for iOS Safari */\n  transform-origin: top left;\n  transform: scale(0.875);\n  width: calc(100% / 0.875);\n  height: calc(100% / 0.875);\n  font-size: calc(14px / 0.875);\n  line-height: calc(22px / 0.875);\n  padding-left: 0;\n  padding-right: 0;\n  border-radius: calc(4px / 0.875);\n\n  /* Display box-shadow for iOS Safari */\n  appearance: none;\n  background: transparent;\n\n  color: var(--charcoal-text2);\n  &::placeholder {\n    color: var(--charcoal-text3);\n  }\n`\n\nconst SingleLineCounter = styled.span`\n  line-height: 22px;\n  font-size: 14px;\n  color: var(--charcoal-text3);\n`\n\nexport const AssistiveText = styled.p<{ invalid: boolean }>`\n  font-size: 14px;\n  line-height: 22px;\n  margin-top: 4px;\n  margin-bottom: -4px;\n  color: ${(p) => `var(--charcoal-${p.invalid ? `assertive` : `text2`})`};\n`\n"],"names":[],"sourceRoot":""}