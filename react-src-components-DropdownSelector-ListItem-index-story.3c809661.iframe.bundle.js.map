{"version":3,"file":"react-src-components-DropdownSelector-ListItem-index-story.3c809661.iframe.bundle.js","mappings":";;;;AAuCA;;;;;;;AAOA;;;;;;;;;AASA;;;;;;;;;ACeA;;;;;;AAMA;;;AAKA;AACA;AAOA","sources":["webpack://charcoal-ui/./packages/react/src/components/DropdownSelector/ListItem/index.tsx","webpack://charcoal-ui/./packages/react/src/components/Switch/index.tsx"],"sourcesContent":["import { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { theme } from '../../../styled'\n\nexport type CustomJSXElement =\n  | keyof JSX.IntrinsicElements\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  | React.JSXElementConstructor<any>\n\nexport type ListItemProps<T extends CustomJSXElement = 'div'> = {\n  children?: ReactNode\n  as?: T\n} & Omit<React.ComponentProps<T>, 'children'>\n\n/**\n * リストのある要素を示すコンポーネント\n *\n * asを用いて拡張することができる\n * @example\n * ```\n * <ListItem as=\"a\" href=\"#\">Link</ListItem>\n * <ListItem as={NextLink} href=\"#\">NextLink</ListItem>\n * ```\n */\nexport default function ListItem<T extends CustomJSXElement = 'div'>(\n  props: ListItemProps<T>\n) {\n  const { children, ...rest } = props\n  return (\n    <StyledLi role=\"option\">\n      <ItemDiv {...rest}>{props.children}</ItemDiv>\n    </StyledLi>\n  )\n}\n\nconst StyledLi = styled.li`\n  list-style: none;\n`\n\nconst ItemDiv = styled.div`\n  display: flex;\n  align-items: center;\n  min-height: 40px;\n  cursor: pointer;\n  outline: none;\n\n  ${theme((o) => [o.padding.horizontal(16), o.disabled])}\n\n  &[aria-disabled=\"true\"] {\n    cursor: default;\n  }\n\n  :hover,\n  :focus,\n  :focus-within {\n    ${theme((o) => [o.bg.surface3])}\n  }\n`\n","import { useSwitch } from '@react-aria/switch'\nimport type { AriaSwitchProps } from '@react-types/switch'\nimport { useMemo, memo, forwardRef } from 'react'\nimport * as React from 'react'\nimport { useToggleState } from 'react-stately'\nimport styled from 'styled-components'\nimport { theme } from '../../styled'\nimport { disabledSelector } from '@charcoal-ui/utils'\nimport { useObjectRef } from '@react-aria/utils'\n\nexport type SwitchProps = {\n  name: string\n  className?: string\n  value?: string\n  checked?: boolean\n  disabled?: boolean\n  onChange(checked: boolean): void\n} & (\n  | // children か label は片方が必須\n  {\n      children: React.ReactNode\n    }\n  | {\n      label: string\n    }\n)\n\nconst SwitchCheckbox = forwardRef<HTMLInputElement, SwitchProps>(\n  function SwitchCheckboxInner(props, external) {\n    const { disabled, className } = props\n\n    const ariaSwitchProps: AriaSwitchProps = useMemo(\n      () => ({\n        ...props,\n\n        // children がいない場合は aria-label をつけないといけない\n        'aria-label': 'children' in props ? undefined : props.label,\n        isDisabled: props.disabled,\n        isSelected: props.checked,\n      }),\n      [props]\n    )\n\n    const state = useToggleState(ariaSwitchProps)\n    const ref = useObjectRef<HTMLInputElement>(external)\n    const {\n      inputProps: { className: _className, type: _type, ...rest },\n    } = useSwitch(ariaSwitchProps, state, ref)\n\n    return (\n      <Label className={className} aria-disabled={disabled}>\n        <SwitchInput {...rest} ref={ref} />\n        {'children' in props ? (\n          // eslint-disable-next-line react/destructuring-assignment\n          <LabelInner>{props.children}</LabelInner>\n        ) : undefined}\n      </Label>\n    )\n  }\n)\n\nexport default memo(SwitchCheckbox)\n\nconst Label = styled.label`\n  display: inline-grid;\n  grid-template-columns: auto 1fr;\n  align-items: center;\n  cursor: pointer;\n  outline: 0;\n\n  ${theme((o) => o.disabled)}\n\n  :active > input {\n    box-shadow: 0 0 0 4px rgba(0, 150, 250, 0.32);\n  }\n\n  ${disabledSelector} {\n    cursor: default;\n  }\n`\n\nconst LabelInner = styled.div`\n  ${theme((o) => [\n    o.typography(14).preserveHalfLeading,\n    o.font.text2,\n    o.margin.left(4),\n  ])}\n`\n\nconst SwitchInput = styled.input.attrs({\n  type: 'checkbox',\n})`\n  appearance: none;\n  display: inline-flex;\n  position: relative;\n  box-sizing: border-box;\n  width: 28px;\n  border: 2px solid transparent;\n\n  transition-property: background-color, box-shadow;\n  transition-duration: 0.2s;\n  cursor: inherit;\n\n  outline: none;\n  border-radius: 16px;\n  height: 16px;\n  margin: 0;\n  background-color: var(--charcoal-text4);\n  :hover {\n    background-color: var(--charcoal-text4-hover);\n  }\n  :active {\n    background-color: var(--charcoal-text4-press);\n  }\n  :focus {\n    box-shadow: 0 0 0 4px rgba(0, 150, 250, 0.32);\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    display: block;\n    top: 0;\n    left: 0;\n    width: 12px;\n    height: 12px;\n    transform: translateX(0);\n    transition: transform 0.2s;\n    border-radius: 1024px;\n    background-color: var(--charcoal-text5);\n    :hover {\n      background-color: var(--charcoal-text5-hover);\n    }\n    :active {\n      background-color: var(--charcoal-text5-press);\n    }\n  }\n\n  &:checked {\n    background-color: var(--charcoal-brand);\n    :hover {\n      background-color: var(--charcoal-brand-hover);\n    }\n    :active {\n      background-color: var(--charcoal-brand-press);\n    }\n    &::after {\n      transform: translateX(12px);\n      transition: transform 0.2s;\n    }\n  }\n`\n"],"names":[],"sourceRoot":""}