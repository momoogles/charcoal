{"version":3,"file":"react-src-components-IconButton-index-story.cb5b067b.iframe.bundle.js","mappings":";;;;AAoDA;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AAGA;;;;;;;;;;;;AAYA;;;;ACnEA;AACA;;;;;AAKA;AAkBA","sources":["webpack://charcoal-ui/./packages/react/src/components/Clickable/index.tsx","webpack://charcoal-ui/./packages/react/src/components/IconButton/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport {\n  LinkProps,\n  useComponentAbstraction,\n} from '../../core/ComponentAbstraction'\nimport { disabledSelector } from '@charcoal-ui/utils'\n\ninterface BaseProps {\n  /**\n   * クリックの無効化\n   */\n  disabled?: boolean\n}\n\ninterface LinkBaseProps {\n  /**\n   * リンクのURL。指定するとbuttonタグではなくaタグとして描画される\n   */\n  to: string\n}\n\nexport type ClickableProps =\n  | (BaseProps & Omit<React.ComponentPropsWithoutRef<'button'>, 'disabled'>)\n  | (BaseProps & LinkBaseProps & Omit<LinkProps, 'to'>)\nexport type ClickableElement = HTMLButtonElement & HTMLAnchorElement\n\nconst Clickable = React.forwardRef<ClickableElement, ClickableProps>(\n  function Clickable(props, ref) {\n    const { Link } = useComponentAbstraction()\n    if ('to' in props) {\n      const { onClick, disabled = false, ...rest } = props\n      return (\n        <A<typeof Link>\n          {...rest}\n          as={disabled ? undefined : Link}\n          onClick={disabled ? undefined : onClick}\n          aria-disabled={disabled}\n          ref={ref}\n        />\n      )\n    } else {\n      return <Button {...props} ref={ref} />\n    }\n  }\n)\nexport default Clickable\n\nconst clickableCss = css`\n  /* Clickable style */\n  cursor: pointer;\n\n  ${disabledSelector} {\n    cursor: default;\n  }\n`\n\nconst Button = styled.button`\n  /* Reset button appearance */\n  appearance: none;\n  background: transparent;\n  padding: 0;\n  border-style: none;\n  outline: none;\n  color: inherit;\n  text-rendering: inherit;\n  letter-spacing: inherit;\n  word-spacing: inherit;\n\n  &:focus {\n    outline: none;\n  }\n\n  /* Change the font styles in all browsers. */\n  font: inherit;\n\n  /* Remove the margin in Firefox and Safari. */\n  margin: 0;\n\n  /* Show the overflow in Edge. */\n  overflow: visible;\n\n  /* Remove the inheritance of text transform in Firefox. */\n  text-transform: none;\n\n  /* Remove the inner border and padding in Firefox. */\n  &::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n\n  ${clickableCss}\n`\n\nconst A = styled.span`\n  /* Reset a-tag appearance */\n  color: inherit;\n\n  &:focus {\n    outline: none;\n  }\n\n  .text {\n    top: calc(1em + 2em);\n  }\n\n  ${clickableCss}\n`\n","import { forwardRef } from 'react'\nimport styled from 'styled-components'\nimport { theme } from '../../styled'\nimport Clickable, { ClickableElement, ClickableProps } from '../Clickable'\nimport type { KnownIconType } from '@charcoal-ui/icons'\n\ntype Variant = 'Default' | 'Overlay'\ntype Size = 'XS' | 'S' | 'M'\n\ninterface StyledProps {\n  readonly variant?: Variant\n  readonly size?: Size\n  readonly icon: keyof KnownIconType\n}\n\nexport type IconButtonProps = StyledProps & ClickableProps\n\nconst IconButton = forwardRef<ClickableElement, IconButtonProps>(\n  function IconButtonInner(\n    { variant = 'Default', size = 'M', icon, ...rest }: IconButtonProps,\n    ref\n  ) {\n    validateIconSize(size, icon)\n    return (\n      <StyledIconButton {...rest} ref={ref} variant={variant} size={size}>\n        <pixiv-icon name={icon} />\n      </StyledIconButton>\n    )\n  }\n)\n\nexport default IconButton\n\nconst StyledIconButton = styled(Clickable).attrs<\n  Required<StyledProps>,\n  ReturnType<typeof styledProps>\n>(styledProps)`\n  user-select: none;\n\n  width: ${(p) => p.width}px;\n  height: ${(p) => p.height}px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  ${({ font, background }) =>\n    theme((o) => [\n      o.font[font],\n      o.bg[background].hover.press,\n      o.disabled,\n      o.borderRadius('oval'),\n      o.outline.default.focus,\n    ])}\n`\n\nfunction styledProps(props: Required<StyledProps>) {\n  return {\n    ...props,\n    ...variantToProps(props.variant),\n    ...sizeToProps(props.size),\n  }\n}\n\nfunction variantToProps(variant: Variant) {\n  switch (variant) {\n    case 'Default':\n      return { font: 'text3', background: 'transparent' } as const\n    case 'Overlay':\n      return { font: 'text5', background: 'surface4' } as const\n  }\n}\n\nfunction sizeToProps(size: Size) {\n  switch (size) {\n    case 'XS':\n      return {\n        width: 20,\n        height: 20,\n      }\n    case 'S':\n      return {\n        width: 32,\n        height: 32,\n      }\n    case 'M':\n      return {\n        width: 40,\n        height: 40,\n      }\n  }\n}\n\n/**\n * validates matches of size and icon\n */\nfunction validateIconSize(size: Size, icon: keyof KnownIconType) {\n  let requiredIconSize: string\n  switch (size) {\n    case 'XS':\n      requiredIconSize = '16'\n      break\n    case 'S':\n    case 'M':\n      requiredIconSize = '24'\n      break\n  }\n  // アイコン名は サイズ/名前\n  const result = /^\\d*/u.exec(icon)\n  if (result == null) {\n    throw new Error('Invalid icon name')\n  }\n  const [iconSize] = result\n  if (iconSize !== requiredIconSize) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `IconButton with size \"${size}\" expect icon size \"${requiredIconSize}, but got \"${iconSize}\"`\n    )\n  }\n}\n"],"names":[],"sourceRoot":""}