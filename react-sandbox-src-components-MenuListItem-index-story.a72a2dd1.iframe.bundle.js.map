{"version":3,"file":"react-sandbox-src-components-MenuListItem-index-story.a72a2dd1.iframe.bundle.js","mappings":";;AA8EA;;;AAGA;;AAEA;;;;AAIA;AAGA;;;;AAIA;;AAEA;;;;;;;;AAUA;;;AAKA;AACA;;;;AAMA;AACA;;;AAYA;;AA4CA;;;;;AAmCA;AACA;;AAIA;;AAIA;;;;AAIA;;;;;;;;;;;;;;;;;;;;ACpLA;;AAIA;;;AAMA;;;AAGA;;;;AAMA;AAEA;;;;;;;;AAUA;;;;AAMA;;;;;;;AAOA;;AAIA;;;;;;;AAOA;;;;AAMA;;;;;;;;;;;;;;;;AAkBA;AACA;;AAEA;;;;;;;;;AASA;AACA;;;;;AAKA;;AAEA;;;;;AC7HA;;;;AAIA;;;AAKA;;;AAIA;;AAEA;;;;;ACqCA;AACA;;;;;;AAUA;;;;AAyBA;AACA;;AAIA;AAEA;;AAEA;;AAIA;;;AAMA;;;;AAIA;AAGA;;;AAGA;AAGA;;;;;;AAUA;;AAEA;AAGA;;;;;AAKA","sources":["webpack://charcoal-ui/./packages/react-sandbox/src/components/MenuListItem/index.tsx","webpack://charcoal-ui/./packages/react-sandbox/src/components/SwitchCheckbox/index.tsx","webpack://charcoal-ui/./packages/react-sandbox/src/components/TextEllipsis/index.tsx","webpack://charcoal-ui/./packages/react-sandbox/src/components/WithIcon/index.tsx"],"sourcesContent":["import { useContext } from 'react'\nimport * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport { theme } from '../../styled'\nimport { TextEllipsis } from '../TextEllipsis'\nimport { LinkProps, useComponentAbstraction } from '@charcoal-ui/react'\nimport { disabledSelector } from '@charcoal-ui/utils'\n\ninterface MenuListItemContextProps {\n  padding: 16 | 24\n}\n\nexport const MenuListItemContext =\n  React.createContext<MenuListItemContextProps>({ padding: 24 })\n\nexport interface MenuListItemBaseData {\n  primary: string | React.ReactNode // 表示アイテム名(上に表示)\n  secondary?: string // 表示アイテム名2(下に表示)\n  onClick?: (e: React.MouseEvent) => void\n  disabled?: boolean\n  gtmClass?: string\n  noHover?: boolean\n}\n\ninterface MenuListItemProps extends MenuListItemBaseData {\n  children?: React.ReactNode // 右寄せで表示したい要素\n}\n\nexport default function MenuListItem({\n  primary,\n  secondary,\n  onClick,\n  disabled = false,\n  noHover = false,\n  gtmClass,\n  children,\n}: MenuListItemProps) {\n  const { padding } = useContext(MenuListItemContext)\n\n  return (\n    <Item\n      hasSubLabel={secondary !== undefined}\n      onClick={(e) => !disabled && onClick && onClick(e)}\n      sidePadding={padding}\n      noHover={noHover}\n      noClick={onClick === undefined}\n      aria-disabled={disabled}\n      role={onClick !== undefined ? 'button' : undefined}\n      className={gtmClass !== undefined ? `gtm-${gtmClass}` : undefined}\n    >\n      <Labels>\n        <PrimaryText>\n          <TextEllipsis lineHeight={22} lineLimit={1}>\n            {primary}\n          </TextEllipsis>\n        </PrimaryText>\n        {secondary !== undefined && (\n          <SecondaryText>\n            <TextEllipsis lineHeight={22} lineLimit={1}>\n              {secondary}\n            </TextEllipsis>\n          </SecondaryText>\n        )}\n      </Labels>\n      {children}\n    </Item>\n  )\n}\n\ninterface ItemProps {\n  hasSubLabel: boolean\n  sidePadding: 16 | 24\n  noHover: boolean\n  noClick: boolean\n}\n\nconst Item = styled.div<ItemProps>`\n  display: flex;\n  height: ${(p) => (p.hasSubLabel ? 56 : 40)}px;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 ${(p) => p.sidePadding}px;\n  user-select: none;\n  cursor: ${(p) => (p.noClick ? 'default' : 'pointer')};\n  transition: 0.2s background-color;\n\n  &:hover {\n    ${(p) =>\n      !p.noHover &&\n      css`\n        background-color: ${({ theme }) => theme.color.surface3};\n      `}\n  }\n\n  ${theme((o) => o.disabled)}\n\n  ${disabledSelector} {\n    cursor: default;\n    pointer-events: none;\n\n    &:hover {\n      background-color: unset;\n    }\n  }\n`\n\nconst Labels = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst PrimaryText = styled.div`\n  color: ${(p) => p.theme.color.text2};\n  line-height: 22px;\n  font-size: 14px;\n  display: grid;\n`\n\nconst SecondaryText = styled.div`\n  color: ${(p) => p.theme.color.text3};\n  line-height: 18px;\n  font-size: 10px;\n`\n\ninterface MenuListLinkItemProps\n  extends MenuListItemBaseData,\n    Omit<LinkProps, 'to' | 'onClick' | 'children'> {\n  link: string\n  children?: React.ReactNode\n}\n\nexport function MenuListLinkItem({\n  link,\n  onClick,\n  disabled = false,\n  primary,\n  secondary,\n  gtmClass,\n  noHover,\n  children,\n  ...linkProps\n}: MenuListLinkItemProps) {\n  const { Link } = useComponentAbstraction()\n  const props: MenuListItemProps = {\n    disabled,\n    primary,\n    secondary,\n    gtmClass,\n    noHover,\n    children,\n  }\n\n  return disabled ? (\n    <span onClick={onClick}>\n      <MenuListItem {...props} />\n    </span>\n  ) : (\n    <A<typeof Link> as={Link} to={link} onClick={onClick} {...linkProps}>\n      <MenuListItem onClick={() => void 0} {...props} />\n    </A>\n  )\n}\n\nconst A = styled.a`\n  display: block;\n`\n\ninterface MenuListLinkItemWithIconProps extends MenuListLinkItemProps {\n  icon: React.ReactNode\n}\n\ninterface MenuListItemWithIconProps extends MenuListItemProps {\n  icon: React.ReactNode\n}\n\nexport function MenuListLinkItemWithIcon({\n  icon,\n  primary: text,\n  ...props\n}: MenuListLinkItemWithIconProps) {\n  const primary = (\n    <IconContainer>\n      <Icon>{icon}</Icon>\n      {text}\n    </IconContainer>\n  )\n  return <MenuListLinkItem primary={primary} {...props} />\n}\n\nexport function MenuListItemWithIcon({\n  icon,\n  primary: text,\n  ...props\n}: MenuListItemWithIconProps) {\n  const primary = (\n    <IconContainer>\n      <Icon>{icon}</Icon>\n      {text}\n    </IconContainer>\n  )\n  return <MenuListItem primary={primary} {...props} />\n}\n\nconst IconContainer = styled.div`\n  display: grid;\n  gap: 8px;\n  grid-auto-flow: column;\n  align-items: center;\n`\n\nconst Icon = styled.div`\n  color: ${({ theme }) => theme.color.text3};\n  display: flex;\n`\n\nexport const MenuListSpacer = styled.div`\n  height: 24px;\n`\n\nexport const MenuListLabel = styled.div`\n  padding: 0 16px;\n  font-size: 12px;\n  line-height: 16px;\n  color: ${({ theme }) => theme.color.text3};\n  margin-top: -2px;\n  margin-bottom: 6px;\n`\n","import * as React from 'react'\n\nimport styled, { css } from 'styled-components'\nimport { applyEffect } from '@charcoal-ui/utils'\n\nexport interface Props extends React.ComponentPropsWithoutRef<'input'> {\n  gtmClass?: string\n  flex?: boolean\n  rowReverse?: boolean\n}\n\nexport default React.forwardRef(function SwitchCheckbox(\n  {\n    gtmClass,\n    flex = false,\n    rowReverse = false,\n    children,\n    disabled,\n    ...props\n  }: Props,\n  ref: React.Ref<HTMLInputElement>\n) {\n  return (\n    <Label\n      className={gtmClass !== undefined ? `gtm-${gtmClass}` : ''}\n      flex={flex}\n      rowReverse={rowReverse}\n      aria-disabled={disabled}\n    >\n      <SwitchOuter>\n        <SwitchInput {...props} disabled={disabled} ref={ref} />\n        <SwitchInner>\n          <SwitchInnerKnob />\n        </SwitchInner>\n      </SwitchOuter>\n      {children != null && (\n        <Children rowReverse={rowReverse}>{children}</Children>\n      )}\n    </Label>\n  )\n})\n\nconst Children = styled.span<{ rowReverse: boolean }>`\n  ${(p) =>\n    p.rowReverse\n      ? css`\n          margin-right: 8px;\n        `\n      : css`\n          margin-left: 8px;\n        `}\n`\n\nconst Label = styled.label<{ flex: boolean; rowReverse: boolean }>`\n  display: inline-flex;\n  align-items: center;\n  ${({ flex }) =>\n    flex &&\n    css`\n      display: flex;\n      justify-content: space-between;\n    `}\n  ${({ rowReverse }) =>\n    css`\n      flex-direction: ${rowReverse ? 'row-reverse' : 'row'};\n    `}\n  cursor: pointer;\n  outline: 0;\n\n  &[aria-disabled='true'] {\n    cursor: auto;\n  }\n`\n\nconst SwitchOuter = styled.span`\n  display: inline-flex;\n  position: relative;\n  z-index: 0;\n`\n\nconst SwitchInner = styled.div`\n  position: relative;\n  box-sizing: border-box;\n  width: 28px;\n  height: 16px;\n  border-radius: 16px;\n  border: 2px solid transparent;\n  background: ${({ theme }) => theme.color.text4};\n  transition: box-shadow 0.2s, background-color 0.2s;\n`\n\nconst SwitchInnerKnob = styled.div`\n  position: absolute;\n  display: block;\n  top: 0;\n  left: 0;\n  width: 12px;\n  height: 12px;\n  background-color: ${({ theme }) => theme.color.text5};\n  border-radius: 50%;\n  transform: translateX(0);\n  transition: transform 0.2s;\n`\n\nconst SwitchInput = styled.input.attrs({\n  type: 'checkbox' as string,\n})`\n  position: absolute;\n  /* NOTE: this is contained by the GraphicCheckboxOuter */\n  z-index: 1;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  /* just to control the clickable area if used standalone */\n  border-radius: 16px;\n  opacity: 0;\n  appearance: none;\n  outline: none;\n  cursor: pointer;\n\n  &:checked {\n    ~ ${SwitchInner} {\n      background-color: ${({ theme }) => theme.color.brand};\n\n      ${SwitchInnerKnob} {\n        transform: translateX(12px);\n      }\n    }\n  }\n\n  &:disabled {\n    cursor: auto;\n\n    ~ ${SwitchInner} {\n      opacity: ${({ theme }) => theme.elementEffect.disabled.opacity};\n    }\n  }\n\n  &:not(:disabled):focus {\n    ~ ${SwitchInner} {\n      box-shadow: 0 0 0 4px\n        ${({ theme }) =>\n          applyEffect(theme.color.brand, theme.elementEffect.disabled)};\n    }\n  }\n`\n","import styled, { css } from 'styled-components'\nimport { onlyText } from './helper'\n\nexport interface Props {\n  lineHeight: number\n  lineLimit?: number\n}\n\n/**\n * 複数行のテキストに表示行数制限を設けて`...`で省略する\n */\nexport const TextEllipsis = styled.div.attrs(\n  ({ children, title = onlyText(children) }) => ({\n    title: title !== '' ? title : undefined,\n  })\n)<Props>`\n  overflow: hidden;\n  line-height: ${(props) => props.lineHeight}px;\n  /* For english */\n  overflow-wrap: break-word;\n\n  ${({ lineLimit = 1, lineHeight }) =>\n    lineLimit === 1\n      ? css`\n          text-overflow: ellipsis;\n          white-space: nowrap;\n        `\n      : css`\n          display: -webkit-box;\n          -webkit-box-orient: vertical;\n          -webkit-line-clamp: ${lineLimit};\n          /* Fallback for -webkit-line-clamp */\n          max-height: ${lineHeight * lineLimit}px;\n        `}\n`\n","import { useRef } from 'react'\nimport * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport { useElementSize } from '../../foundation/hooks'\n\nexport interface Props {\n  children?: React.ReactNode\n  icon: React.ReactNode\n  /**\n   * アイコンを表示。デフォルトがtrueなので、非表示にするときに使います。 (アイコン自体の幅を維持します)\n   */\n  show?: boolean | 'collapse'\n  /**\n   * アイコンを前にする\n   */\n  prefix?: boolean\n  /**\n   * アイコンの高さが文字の高さよりも大きいケースで有効。アイコンの高さをゼロにしてインラインの高さに関与させないようにします。\n   */\n  fit?: boolean\n  /**\n   * `fit`と併用した時にのみ有効な最適化オプション。アイコンの幅の自動計算を行わず指定した数値を利用します。\n   */\n  width?: number\n  /**\n   * 親要素のサイズに合わせるのではなく、コンテンツのサイズを優先する\n   */\n  fixed?: boolean\n}\n\nexport default React.memo(function WithIcon({\n  children,\n  icon,\n  show = true,\n  prefix: pre = false,\n  width,\n  fit = false,\n  fixed = false,\n}: Props) {\n  const node = fit ? (\n    width === undefined ? (\n      <AutoWidthIconAnchor show={show} pre={pre}>\n        {icon}\n      </AutoWidthIconAnchor>\n    ) : (\n      <IconAnchor width={width} show={show} pre={pre}>\n        <Icon>{icon}</Icon>\n      </IconAnchor>\n    )\n  ) : (\n    <IconAnchorNaive show={show} pre={pre}>\n      <IconNaive>{icon}</IconNaive>\n    </IconAnchorNaive>\n  )\n\n  return (\n    <Root>\n      {pre && node}\n      <Text fixed={fixed}>{children}</Text>\n      {!pre && node}\n    </Root>\n  )\n})\n\nconst Root = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Text = styled.div<{ fixed: boolean }>`\n  ${(p) =>\n    !p.fixed &&\n    css`\n      min-width: 0;\n      overflow: hidden;\n    `}\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nfunction AutoWidthIconAnchor({\n  children,\n  show,\n  pre,\n}: {\n  children: React.ReactNode\n  show: boolean | 'collapse'\n  pre: boolean\n}) {\n  const ref = useRef<HTMLDivElement>(null)\n  // depsを空配列にしないことで初回だけ同期で幅を計算させるテクニック\n  const width = useElementSize(ref, [null])?.width ?? 0\n  return (\n    <IconAnchor width={width} show={show} pre={pre}>\n      <Icon ref={ref}>{children}</Icon>\n    </IconAnchor>\n  )\n}\n\nconst forceCenteringCss = css`\n  > svg {\n    display: block;\n  }\n`\n\nconst iconAnchorCss = css`\n  ${(p: { show: boolean | 'collapse'; pre: boolean }) =>\n    p.show === 'collapse'\n      ? css`\n          display: none;\n        `\n      : css`\n          visibility: ${p.show ? 'visible' : 'hidden'};\n        `};\n  ${(p) =>\n    p.pre\n      ? css`\n          margin-right: 4px;\n        `\n      : css`\n          margin-left: 4px;\n        `}\n`\n\nconst IconAnchorNaive = styled.div`\n  display: flex;\n  align-items: center;\n\n  ${iconAnchorCss}\n`\n\nconst IconNaive = styled.div`\n  display: inline-flex;\n\n  ${forceCenteringCss}\n`\n\nconst IconAnchor = styled.div<{\n  width: number\n  show: boolean | 'collapse'\n  pre: boolean\n}>`\n  display: flex;\n  position: relative;\n  /* Iconをline-heightに関与させない */\n  height: 0;\n  /* 横方向の領域は確保する */\n  width: ${(p) => p.width}px;\n\n  ${iconAnchorCss}\n`\n\nconst Icon = styled.div`\n  display: inline-flex;\n  position: absolute;\n  transform: translateY(-50%);\n\n  ${forceCenteringCss}\n`\n"],"names":[],"sourceRoot":""}