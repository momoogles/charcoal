{"version":3,"file":"react-sandbox-src-components-WithIcon-index-story.3d73abb1.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA;AACA;;;;;;AAUA;;;;AAyBA;AACA;;AAIA;AAEA;;AAEA;;AAIA;;;AAMA;;;;AAIA;AAGA;;;AAGA;AAGA;;;;;;AAUA;;AAEA;AAGA;;;;;AAKA","sources":["webpack://charcoal-ui/./packages/react-sandbox/src/components/WithIcon/index.tsx"],"sourcesContent":["import { useRef } from 'react'\nimport * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport { useElementSize } from '../../foundation/hooks'\n\nexport interface Props {\n  children?: React.ReactNode\n  icon: React.ReactNode\n  /**\n   * アイコンを表示。デフォルトがtrueなので、非表示にするときに使います。 (アイコン自体の幅を維持します)\n   */\n  show?: boolean | 'collapse'\n  /**\n   * アイコンを前にする\n   */\n  prefix?: boolean\n  /**\n   * アイコンの高さが文字の高さよりも大きいケースで有効。アイコンの高さをゼロにしてインラインの高さに関与させないようにします。\n   */\n  fit?: boolean\n  /**\n   * `fit`と併用した時にのみ有効な最適化オプション。アイコンの幅の自動計算を行わず指定した数値を利用します。\n   */\n  width?: number\n  /**\n   * 親要素のサイズに合わせるのではなく、コンテンツのサイズを優先する\n   */\n  fixed?: boolean\n}\n\nexport default React.memo(function WithIcon({\n  children,\n  icon,\n  show = true,\n  prefix: pre = false,\n  width,\n  fit = false,\n  fixed = false,\n}: Props) {\n  const node = fit ? (\n    width === undefined ? (\n      <AutoWidthIconAnchor show={show} pre={pre}>\n        {icon}\n      </AutoWidthIconAnchor>\n    ) : (\n      <IconAnchor width={width} show={show} pre={pre}>\n        <Icon>{icon}</Icon>\n      </IconAnchor>\n    )\n  ) : (\n    <IconAnchorNaive show={show} pre={pre}>\n      <IconNaive>{icon}</IconNaive>\n    </IconAnchorNaive>\n  )\n\n  return (\n    <Root>\n      {pre && node}\n      <Text fixed={fixed}>{children}</Text>\n      {!pre && node}\n    </Root>\n  )\n})\n\nconst Root = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Text = styled.div<{ fixed: boolean }>`\n  ${(p) =>\n    !p.fixed &&\n    css`\n      min-width: 0;\n      overflow: hidden;\n    `}\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nfunction AutoWidthIconAnchor({\n  children,\n  show,\n  pre,\n}: {\n  children: React.ReactNode\n  show: boolean | 'collapse'\n  pre: boolean\n}) {\n  const ref = useRef<HTMLDivElement>(null)\n  // depsを空配列にしないことで初回だけ同期で幅を計算させるテクニック\n  const width = useElementSize(ref, [null])?.width ?? 0\n  return (\n    <IconAnchor width={width} show={show} pre={pre}>\n      <Icon ref={ref}>{children}</Icon>\n    </IconAnchor>\n  )\n}\n\nconst forceCenteringCss = css`\n  > svg {\n    display: block;\n  }\n`\n\nconst iconAnchorCss = css`\n  ${(p: { show: boolean | 'collapse'; pre: boolean }) =>\n    p.show === 'collapse'\n      ? css`\n          display: none;\n        `\n      : css`\n          visibility: ${p.show ? 'visible' : 'hidden'};\n        `};\n  ${(p) =>\n    p.pre\n      ? css`\n          margin-right: 4px;\n        `\n      : css`\n          margin-left: 4px;\n        `}\n`\n\nconst IconAnchorNaive = styled.div`\n  display: flex;\n  align-items: center;\n\n  ${iconAnchorCss}\n`\n\nconst IconNaive = styled.div`\n  display: inline-flex;\n\n  ${forceCenteringCss}\n`\n\nconst IconAnchor = styled.div<{\n  width: number\n  show: boolean | 'collapse'\n  pre: boolean\n}>`\n  display: flex;\n  position: relative;\n  /* Iconをline-heightに関与させない */\n  height: 0;\n  /* 横方向の領域は確保する */\n  width: ${(p) => p.width}px;\n\n  ${iconAnchorCss}\n`\n\nconst Icon = styled.div`\n  display: inline-flex;\n  position: absolute;\n  transform: translateY(-50%);\n\n  ${forceCenteringCss}\n`\n"],"names":[],"sourceRoot":""}