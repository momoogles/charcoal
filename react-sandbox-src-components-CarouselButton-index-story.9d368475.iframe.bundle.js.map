{"version":3,"file":"react-sandbox-src-components-CarouselButton-index-story.9d368475.iframe.bundle.js","mappings":";;;;AAiEA;AAAA;;AASA;;AAEA;AAGA;;;;;;;;;;;;;;;;;AAiBA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;;;;;AASA;;;;AA2BA;AAEA;;;;AAIA;AAEA;;AAIA;;;;;;AClHA;AAEA;AACA;;;;AAUA","sources":["webpack://charcoal-ui/./packages/react-sandbox/src/components/CarouselButton/index.tsx","webpack://charcoal-ui/./packages/react-sandbox/src/components/icons/Base.tsx"],"sourcesContent":["import styled, { css } from 'styled-components'\nimport { unreachable } from '../../foundation/utils'\nimport NextIcon, { WedgeDirection } from '../icons/NextIcon'\nimport { applyEffect } from '@charcoal-ui/utils'\n\nexport enum Direction {\n  Right = 'right',\n  Left = 'left',\n}\n\ninterface Props {\n  direction: Direction\n  show: boolean\n  offset?: number\n  padding?: number\n  bottomOffset?: number\n  gradient?: boolean\n  onClick(): void\n}\n\nexport default function CarouselButton({\n  direction,\n  show,\n  offset = 0,\n  padding = 0,\n  bottomOffset: bottom = 0,\n  gradient = false,\n  onClick,\n}: Props) {\n  const offsetStyle =\n    direction === Direction.Left\n      ? {\n          left: gradient ? offset - 72 : offset,\n          paddingLeft: Math.max(padding, 0),\n          paddingBottom: bottom,\n        }\n      : {\n          right: gradient ? offset - 72 : offset,\n          paddingRight: Math.max(padding, 0),\n          paddingBottom: bottom,\n        }\n  return (\n    <Button\n      type=\"button\"\n      onClick={onClick}\n      hide={!show}\n      style={offsetStyle}\n      css={onlyNonTouchDevice}\n    >\n      <CarouselButtonIcon>\n        <NextIcon\n          direction={\n            direction === Direction.Right\n              ? WedgeDirection.Right\n              : // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n              direction === Direction.Left\n              ? WedgeDirection.Left\n              : unreachable()\n          }\n        />\n      </CarouselButtonIcon>\n    </Button>\n  )\n}\n\nexport const CAROUSEL_BUTTON_SIZE = 40\n\nconst CarouselButtonIcon = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: ${CAROUSEL_BUTTON_SIZE}px;\n  height: ${CAROUSEL_BUTTON_SIZE}px;\n  border-radius: 50%;\n  background-color: ${({ theme }) => theme.color.surface4};\n  transition: 0.4s visibility, 0.4s opacity, 0.2s background-color, 0.2s color;\n  color: ${({ theme }) => theme.color.text5};\n`\n\nconst Button = styled.button<{ hide: boolean }>`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  align-items: center;\n  padding: 0;\n  min-width: 40px;\n  border: none;\n  outline: 0;\n  background: transparent;\n  cursor: pointer;\n  transition: 0.4s visibility, 0.4s opacity;\n  /* つらい */\n  /* このコンポーネントはCarouselでしか使われてないのでそっちでコンテキストで切る */\n  z-index: 1;\n\n  &:hover ${CarouselButtonIcon} {\n    background-color: ${({ theme }) =>\n      applyEffect(theme.color.surface4, theme.effect.hover)};\n    color: ${({ theme }) => applyEffect(theme.color.text5, theme.effect.hover)};\n  }\n\n  &:active ${CarouselButtonIcon} {\n    background-color: ${({ theme }) =>\n      applyEffect(theme.color.surface4, theme.effect.press)};\n    color: ${({ theme }) => applyEffect(theme.color.text5, theme.effect.press)};\n  }\n\n  ${(p) =>\n    p.hide &&\n    css`\n      visibility: hidden;\n      opacity: 0;\n      pointer-events: none;\n    `}\n`\n\nexport function ScrollHintButton({\n  direction,\n  onClick,\n}: {\n  direction: Direction\n  onClick(): void\n}) {\n  return (\n    <ScrollHintIcon onClick={onClick}>\n      <NextIcon\n        direction={\n          direction === Direction.Right\n            ? WedgeDirection.Right\n            : // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            direction === Direction.Left\n            ? WedgeDirection.Left\n            : unreachable()\n        }\n      />\n    </ScrollHintIcon>\n  )\n}\n\nconst ScrollHintIcon = styled(CarouselButtonIcon)`\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${({ theme }) =>\n      applyEffect(theme.color.surface4, theme.effect.hover)};\n    color: ${({ theme }) => applyEffect(theme.color.text5, theme.effect.hover)};\n  }\n\n  &:active {\n    background-color: ${({ theme }) =>\n      applyEffect(theme.color.surface4, theme.effect.press)};\n    color: ${({ theme }) => applyEffect(theme.color.text5, theme.effect.press)};\n  }\n`\n\nconst onlyNonTouchDevice = css`\n  @media (hover: none) and (pointer: coarse) {\n    display: none;\n  }\n`\n","import * as React from 'react'\nimport styled from 'styled-components'\n\nexport type IconSizes = 16 | 24 | 32\n\ninterface Props {\n  path: string | React.ReactNode\n  viewBoxSize: number\n  size?: IconSizes | 40 | 48 | 64 | 72\n  transform?: string\n  currentColor?: boolean\n  fillRule?: 'nonzero' | 'evenodd'\n  clipRule?: 'nonzero' | 'evenodd' | 'inherit'\n}\n\nexport default function IconBase({\n  size = 24,\n  viewBoxSize,\n  currentColor,\n  path,\n  transform,\n  fillRule,\n  clipRule,\n}: Props) {\n  return (\n    <Icon\n      viewBox={`0 0 ${viewBoxSize} ${viewBoxSize}`}\n      size={size}\n      currentColor={currentColor}\n    >\n      <IconBasePath\n        path={path}\n        transform={transform}\n        fillRule={fillRule}\n        clipRule={clipRule}\n      />\n    </Icon>\n  )\n}\n\nconst Icon = styled.svg<{ size: number; currentColor?: boolean }>`\n  stroke: none;\n  fill: ${({ currentColor = false, theme }) =>\n    currentColor ? 'currentColor' : theme.color.text2};\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  line-height: 0;\n  font-size: 0;\n  vertical-align: middle;\n`\n\ntype IconBasePathProps = Pick<\n  Props,\n  'path' | 'transform' | 'fillRule' | 'clipRule'\n>\nexport const IconBasePath = ({\n  path,\n  transform,\n  fillRule,\n  clipRule,\n}: IconBasePathProps) => {\n  if (typeof path === 'string') {\n    return (\n      <path\n        d={path}\n        transform={transform}\n        fillRule={fillRule}\n        clipRule={clipRule}\n      />\n    )\n  } else {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <>{path}</>\n  }\n}\n"],"names":[],"sourceRoot":""}