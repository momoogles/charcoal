{"version":3,"file":"react-src-components-Modal-index-story.c5134c70.iframe.bundle.js","mappings":";;;AA2CA;;AAUA;AAGA;AAZA;;;AAkBA;;;;;AAKA;;;;;;;;;;;;;;;;AC8FA;AAGA;;AAIA;;AAMA;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;AAMA;;;AAGA;;;AAOA;;;;AAMA;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;AAMA;;;;;AAKA","sources":["webpack://charcoal-ui/./packages/react/src/components/Modal/__stories__/InternalScrollStory.tsx","webpack://charcoal-ui/./packages/react/src/components/TextField/index.tsx"],"sourcesContent":["import { Story } from '../../../_lib/compat'\nimport Modal, { BottomSheet, ModalProps } from '..'\nimport { OverlayProvider } from '@react-aria/overlays'\nimport { useOverlayTriggerState } from 'react-stately'\nimport Button from '../../Button'\nimport { ModalBody, ModalButtons, ModalHeader } from '../ModalPlumbing'\nimport styled, { css } from 'styled-components'\nimport { maxWidth } from '@charcoal-ui/utils'\n\nexport const InternalScrollStory: Story<ModalProps> = (args: ModalProps) => {\n  const state = useOverlayTriggerState({})\n  return (\n    <OverlayProvider>\n      <Button onClick={() => state.open()}>Open Modal</Button>\n\n      <Modal {...args} isOpen={state.isOpen} onClose={() => state.close()}>\n        <ModalHeader />\n        <ModalBody>\n          <ModalBodyOverflowDiv $offset={56} $bottomSheet={args.bottomSheet}>\n            <div\n              style={{\n                height: 1000,\n                background: `linear-gradient(#e66465, #9198e5)`,\n              }}\n            ></div>\n          </ModalBodyOverflowDiv>\n          <TopBorderButtons>\n            <Button fullWidth onClick={() => state.close()}>\n              Close\n            </Button>\n          </TopBorderButtons>\n        </ModalBody>\n      </Modal>\n    </OverlayProvider>\n  )\n}\n\n// underlay padding-top: 40px (desktop)\n// underlay padding-bottom: 40px (desktop)\n// modal header: 64px (desktop)\n// modal header: 48px (mobile-bottom-sheet)\n// modal padding-bottom: 40px\n// button and space: 56px\nconst MAX_HEIGHT_OFFSET = 64 + 40 + 40 + 40\nconst MAX_HEIGHT_OFFSET_MOBILE = MAX_HEIGHT_OFFSET - 40 * 2 - 16\nconst ModalBodyOverflowDiv = styled.div<{\n  $offset: number\n  $bottomSheet?: BottomSheet\n}>`\n  overflow: auto;\n  max-height: calc(\n    100vh - ${MAX_HEIGHT_OFFSET}px - ${({ $offset }) => $offset}px\n  );\n  ${({ $bottomSheet, $offset }) =>\n    ($bottomSheet === true || $bottomSheet === 'full') &&\n    css`\n      @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n        max-height: calc(100vh - ${MAX_HEIGHT_OFFSET_MOBILE}px - ${$offset}px);\n      }\n    `}\n`\n\nconst TopBorderButtons = styled(ModalButtons)`\n  position: relative;\n  &::before {\n    content: '';\n    pointer-events: none;\n    border-top: 1px solid ${({ theme }) => theme.border.default.color};\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n  }\n`\n","import { useTextField } from '@react-aria/textfield'\nimport { useVisuallyHidden } from '@react-aria/visually-hidden'\nimport { ReactNode, useCallback, useEffect, useRef, useState } from 'react'\nimport * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport FieldLabel, { FieldLabelProps } from '../FieldLabel'\nimport { countCodePointsInString, mergeRefs } from '../../_lib'\nimport { ReactAreaUseTextFieldCompat } from '../../_lib/compat'\nimport { useFocusWithClick } from './useFocusWithClick'\n\ntype DOMProps = Omit<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  // react-ariaのhookは、onChangeが`(v: string) => void`想定\n  | 'onChange'\n\n  // RDFa Attributeとかぶる\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/58d57ca87ac7be0d306c0844dc254e90c150bd0d/types/react/index.d.ts#L1951\n  | 'prefix'\n\n  // ReactAreaUseTextFieldCompatに書いてあるような事情で、ここにあるイベントハンドラの型をゆるめる\n  | keyof ReactAreaUseTextFieldCompat\n>\n\nexport interface TextFieldProps\n  extends Pick<FieldLabelProps, 'label' | 'requiredText' | 'subLabel'>,\n    DOMProps,\n    ReactAreaUseTextFieldCompat {\n  readonly prefix?: ReactNode\n  readonly suffix?: ReactNode\n\n  // <input> 要素は number とか string[] もありうるが、今はこれしか想定してない\n  readonly defaultValue?: string\n  readonly value?: string\n  readonly onChange?: (value: string) => void\n\n  // react-ariaの型定義のせいでHTMLInputElementにできない\n  readonly onKeyDown?: (event: React.KeyboardEvent<Element>) => void\n  readonly onFocus?: (event: React.FocusEvent<Element>) => void\n  readonly onBlur?: (event: React.FocusEvent<Element>) => void\n\n  readonly showCount?: boolean\n  readonly showLabel?: boolean\n  readonly assistiveText?: string\n  readonly invalid?: boolean\n}\n\nconst TextField = React.forwardRef<HTMLInputElement, TextFieldProps>(\n  function SingleLineTextFieldInner({ onChange, ...props }, forwardRef) {\n    const {\n      className,\n      showLabel = false,\n      showCount = false,\n      label,\n      requiredText,\n      subLabel,\n      disabled = false,\n      required,\n      invalid = false,\n      assistiveText,\n      maxLength,\n      prefix = null,\n      suffix = null,\n    } = props\n\n    const { visuallyHiddenProps } = useVisuallyHidden()\n    const ariaRef = useRef<HTMLInputElement>(null)\n    const [count, setCount] = useState(\n      countCodePointsInString(props.value ?? '')\n    )\n\n    const nonControlled = props.value === undefined\n    const handleChange = useCallback(\n      (value: string) => {\n        const count = countCodePointsInString(value)\n        if (maxLength !== undefined && count > maxLength) {\n          return\n        }\n        if (nonControlled) {\n          setCount(count)\n        }\n        onChange?.(value)\n      },\n      [maxLength, nonControlled, onChange]\n    )\n\n    useEffect(() => {\n      setCount(countCodePointsInString(props.value ?? ''))\n    }, [props.value])\n\n    const { inputProps, labelProps, descriptionProps, errorMessageProps } =\n      useTextField(\n        {\n          inputElementType: 'input',\n          isDisabled: disabled,\n          isRequired: required,\n          validationState: invalid ? 'invalid' : 'valid',\n          description: !invalid && assistiveText,\n          errorMessage: invalid && assistiveText,\n          onChange: handleChange,\n          ...props,\n        },\n        ariaRef\n      )\n\n    const containerRef = useRef(null)\n\n    useFocusWithClick(containerRef, ariaRef)\n\n    return (\n      <TextFieldRoot className={className} isDisabled={disabled}>\n        <TextFieldLabel\n          label={label}\n          requiredText={requiredText}\n          required={required}\n          subLabel={subLabel}\n          {...labelProps}\n          {...(!showLabel ? visuallyHiddenProps : {})}\n        />\n        <StyledInputContainer\n          ref={containerRef}\n          invalid={invalid}\n          aria-disabled={disabled === true ? true : undefined}\n          hasPrefix={prefix != null}\n          hasSuffix={suffix != null || showCount}\n        >\n          {prefix && <PrefixContainer>{prefix}</PrefixContainer>}\n          <StyledInput\n            ref={mergeRefs(forwardRef, ariaRef)}\n            invalid={invalid}\n            {...inputProps}\n          />\n          {(suffix || showCount) && (\n            <SuffixContainer>\n              {suffix}\n              {showCount && (\n                <SingleLineCounter>\n                  {maxLength !== undefined ? `${count}/${maxLength}` : count}\n                </SingleLineCounter>\n              )}\n            </SuffixContainer>\n          )}\n        </StyledInputContainer>\n        {assistiveText != null && assistiveText.length !== 0 && (\n          <AssistiveText\n            invalid={invalid}\n            {...(invalid ? errorMessageProps : descriptionProps)}\n          >\n            {assistiveText}\n          </AssistiveText>\n        )}\n      </TextFieldRoot>\n    )\n  }\n)\n\nexport default TextField\n\nconst TextFieldRoot = styled.div<{ isDisabled: boolean }>`\n  display: flex;\n  flex-direction: column;\n\n  ${(p) => p.isDisabled && { opacity: p.theme.elementEffect.disabled.opacity }}\n`\n\nexport const TextFieldLabel = styled(FieldLabel)`\n  margin-bottom: 8px;\n`\n\nconst StyledInputContainer = styled.div<{\n  invalid: boolean\n  hasPrefix: boolean\n  hasSuffix: boolean\n}>`\n  display: grid;\n  grid-template-columns: ${(p) =>\n    [p.hasPrefix && 'auto', '1fr', p.hasSuffix && 'auto']\n      .filter(Boolean)\n      .join(' ')};\n  height: 40px;\n  transition: 0.2s background-color, 0.2s box-shadow;\n  color: var(--charcoal-text2);\n  background-color: var(--charcoal-surface3);\n  border-radius: 4px;\n  gap: 4px;\n  padding: 0 8px;\n  line-height: 22px;\n  font-size: 14px;\n\n  :not(:disabled):not([aria-disabled]):hover,\n  [aria-disabled='false']:hover {\n    background-color: var(--charcoal-surface3-hover);\n  }\n\n  :not(:disabled):not([aria-disabled]):active,\n  [aria-disabled='false']:active {\n    outline: none;\n    box-shadow: 0 0 0 4px\n      ${(p) => (p.invalid ? `rgba(255,43,0,0.32)` : `rgba(0, 150, 250, 0.32);`)};\n  }\n\n  :focus-within {\n    outline: none;\n    box-shadow: 0 0 0 4px\n      ${(p) => (p.invalid ? `rgba(255,43,0,0.32)` : `rgba(0, 150, 250, 0.32);`)};\n  }\n\n  ${(p) =>\n    p.invalid &&\n    css`\n      box-shadow: 0 0 0 4px rgba(255, 43, 0, 0.32);\n    `}\n`\n\nconst PrefixContainer = styled.div`\n  display: flex;\n  padding-left: 8px;\n  align-items: center;\n`\n\nconst SuffixContainer = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`\n\nconst StyledInput = styled.input<{\n  invalid: boolean\n}>`\n  border: none;\n  box-sizing: border-box;\n  outline: none;\n  font-family: inherit;\n\n  /* Prevent zooming for iOS Safari */\n  transform-origin: top left;\n  transform: scale(0.875);\n  width: calc(100% / 0.875);\n  height: calc(100% / 0.875);\n  font-size: calc(14px / 0.875);\n  line-height: calc(22px / 0.875);\n  padding-left: 0;\n  padding-right: 0;\n  border-radius: calc(4px / 0.875);\n\n  /* Display box-shadow for iOS Safari */\n  appearance: none;\n  background: transparent;\n\n  color: var(--charcoal-text2);\n  &::placeholder {\n    color: var(--charcoal-text3);\n  }\n`\n\nconst SingleLineCounter = styled.span`\n  line-height: 22px;\n  font-size: 14px;\n  color: var(--charcoal-text3);\n`\n\nexport const AssistiveText = styled.p<{ invalid: boolean }>`\n  font-size: 14px;\n  line-height: 22px;\n  margin-top: 4px;\n  margin-bottom: -4px;\n  color: ${(p) => `var(--charcoal-${p.invalid ? `assertive` : `text2`})`};\n`\n"],"names":[],"sourceRoot":""}