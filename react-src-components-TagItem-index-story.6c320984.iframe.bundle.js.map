{"version":3,"file":"react-src-components-TagItem-index-story.6c320984.iframe.bundle.js","mappings":";;;AAuFA;;;;;;;;AAQA;;AAUA;AACA;;;AAKA;;;;;;;;AAUA;AACA;;AAEA;AAGA;;;;;;;;;;AAUA;;;;AAMA;;AAEA;;;AAKA;AACA;AAEA;;;;;AAMA;AACA;AAGA;;;;;;;;AAUA;AACA","sources":["webpack://charcoal-ui/./packages/react/src/components/TagItem/index.tsx"],"sourcesContent":["import { forwardRef, memo, useMemo, ComponentPropsWithoutRef } from 'react'\nimport { useObjectRef } from '@react-aria/utils'\nimport styled, { css } from 'styled-components'\nimport { theme } from '../../styled'\nimport { disabledSelector, px } from '@charcoal-ui/utils'\nimport { AriaButtonProps, useButton } from '@react-aria/button'\nimport Icon from '../Icon'\n\nconst sizeMap = {\n  S: 32,\n  M: 40,\n}\n\nexport type TagItemProps = {\n  label: string\n  translatedLabel?: string\n  bgColor?: string\n  bgImage?: string\n  status?: 'default' | 'active' | 'inactive'\n  size?: keyof typeof sizeMap\n  disabled?: boolean\n  className?: string\n} & Pick<ComponentPropsWithoutRef<'a'>, 'href' | 'target' | 'rel' | 'onClick'>\n\nconst TagItem = forwardRef<HTMLAnchorElement, TagItemProps>(\n  function TagItemInner(\n    {\n      label,\n      translatedLabel,\n      bgColor = '#7ACCB1',\n      bgImage,\n      size = 'M',\n      disabled,\n      status = 'default',\n      className,\n      ...props\n    },\n    _ref\n  ) {\n    const ref = useObjectRef(_ref)\n    const ariaButtonProps = useMemo<AriaButtonProps<'a'>>(\n      () => ({\n        elementType: 'a',\n        isDisabled: disabled,\n        ...props,\n      }),\n      [disabled, props]\n    )\n\n    const { buttonProps } = useButton(ariaButtonProps, ref)\n    const hasTranslatedLabel =\n      translatedLabel !== undefined && translatedLabel.length > 0\n\n    return (\n      <TagItemRoot\n        ref={ref}\n        size={hasTranslatedLabel ? 'M' : size}\n        status={status}\n        {...buttonProps}\n        className={className}\n      >\n        <Background bgColor={bgColor} bgImage={bgImage} status={status} />\n\n        <Inner>\n          <LabelWrapper isTranslate={hasTranslatedLabel}>\n            {hasTranslatedLabel && (\n              <TranslatedLabel>\n                <Label>{translatedLabel}</Label>\n              </TranslatedLabel>\n            )}\n            <Label>{label}</Label>\n          </LabelWrapper>\n          {status === 'active' && <Icon name=\"16/Remove\" />}\n        </Inner>\n      </TagItemRoot>\n    )\n  }\n)\n\nexport default memo(TagItem)\n\ntype TagItemRootProps = Pick<TagItemProps, 'status'> &\n  Required<Pick<TagItemProps, 'size'>>\n\nconst TagItemRoot = styled.a<TagItemRootProps>`\n  isolation: isolate;\n  position: relative;\n  height: ${({ size }) => sizeMap[size]}px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  text-decoration: none;\n  cursor: pointer;\n  overflow: hidden;\n\n  ${({ size, status }) =>\n    theme((o) => [\n      o.outline.default.focus,\n      o.borderRadius(4),\n      status !== 'active' && size === 'M' && o.padding.horizontal(24),\n      status !== 'active' && size === 'S' && o.padding.horizontal(16),\n      status === 'inactive' ? o.font.text2 : o.font.text5,\n      ...(status === 'active' ? [o.padding.left(16), o.padding.right(8)] : []),\n    ])}\n\n  ${disabledSelector} {\n    ${theme((o) => [o.disabled])}\n    cursor: default;\n  }\n`\n\nconst Background = styled.div<\n  Pick<TagItemProps, 'bgColor' | 'bgImage' | 'status'>\n>`\n  position: absolute;\n  z-index: 1;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n\n  background-color: ${({ bgColor }) => bgColor};\n  ${({ status }) => status === 'inactive' && theme((o) => o.bg.surface3)}\n\n  ${({ bgImage }) =>\n    bgImage !== undefined &&\n    css`\n      ${theme((o) => [o.bg.surface4])}\n      &::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-position: center;\n        background-size: cover;\n        background-image: url(${bgImage});\n        mix-blend-mode: overlay;\n      }\n    `}\n`\n\nconst Inner = styled.div`\n  display: inline-flex;\n  gap: ${({ theme }) => px(theme.spacing[8])};\n  align-items: center;\n  z-index: 2;\n`\n\nconst labelCSS = css`\n  ${theme((o) => [o.typography(14).bold])}\n`\nconst translateLabelCSS = css`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  font-size: 10px;\n`\nconst LabelWrapper = styled.div<{ isTranslate?: boolean }>`\n  ${({ isTranslate }) => (isTranslate ?? false ? translateLabelCSS : labelCSS)}\n`\n\nconst Label = styled.span`\n  max-width: 152px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  font-size: inherit;\n  color: inherit;\n  line-height: inherit;\n`\n\nconst TranslatedLabel = styled.div`\n  ${theme((o) => [o.typography(12).bold])}\n`\n"],"names":[],"sourceRoot":""}