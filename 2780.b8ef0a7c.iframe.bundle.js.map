{"version":3,"file":"2780.b8ef0a7c.iframe.bundle.js","mappings":";;;AAoDA;;;AASA;AACA;;;;;;;;;;;;AAYA;;AAEA;AACA;;;;;;;;;;;;;AAaA;AACA;;;AAGA;AACA;;;;;;;;;;AAUA;AAGA;;;ACvDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;;;;AAIA;AAGA;AACA;;;;ACEA;;;;;;;AAOA;;;;;;;;;AASA;;;;;;;;;;;ACsBA;;;;;ACaA;;AAEA;;AAIA;;;AAGA;AAGA;;;;;;;;;;;AAWA;;;;AAIA;AAUA;;;AAGA;AAGA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;ACzEA;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;;AAIA;;;;AAIA;;;;;;ACzFA;AACA;;;;AAIA;AACA;;;;;;;;AAQA;;;;;AAKA;;;;;;;;;;;;;;;AAwBA;;;;;ACnEA;AACA;;;;AAQA;;;;;;;;;;;;;;;;;;;;;AAuBA;;;AAKA;;AAIA;;;;;;;;;;;;ACpBA;;;;;AAoBA;;;AAGA;;;;;AAOA;;;;;;;;;ACkIA;;;;;;;;;;;;;;;AAeA;AACA;;;;AAQA;;;;;;;;;;;;;;;;;AAmBA;;;;AAeA","sources":["webpack://charcoal-ui/./packages/react/src/components/Button/index.tsx","webpack://charcoal-ui/./packages/react/src/components/Clickable/index.tsx","webpack://charcoal-ui/./packages/react/src/components/DropdownSelector/DropdownMenuItem.tsx","webpack://charcoal-ui/./packages/react/src/components/DropdownSelector/ListItem/index.tsx","webpack://charcoal-ui/./packages/react/src/components/DropdownSelector/Popover/index.tsx","webpack://charcoal-ui/./packages/react/src/components/DropdownSelector/index.tsx","webpack://charcoal-ui/./packages/react/src/components/FieldLabel/index.tsx","webpack://charcoal-ui/./packages/react/src/components/IconButton/index.tsx","webpack://charcoal-ui/./packages/react/src/components/Modal/ModalPlumbing.tsx","webpack://charcoal-ui/./packages/react/src/components/Modal/Dialog/index.tsx","webpack://charcoal-ui/./packages/react/src/components/Modal/index.tsx"],"sourcesContent":["import { forwardRef } from 'react'\nimport styled, { css } from 'styled-components'\nimport { unreachable } from '../../_lib'\nimport Clickable, { ClickableElement, ClickableProps } from '../Clickable'\n\ntype Variant = 'Primary' | 'Default' | 'Overlay' | 'Danger' | 'Navigation'\ntype Size = 'S' | 'M'\n\ninterface StyledProps {\n  $variant: Variant\n  $fullWidth: boolean\n  $size: Size\n}\n\nexport type ButtonProps = Partial<{\n  variant: Variant\n  size: Size\n  fullWidth: boolean\n}> &\n  ClickableProps\n\nconst Button = forwardRef<ClickableElement, ButtonProps>(function Button(\n  {\n    children,\n    variant = 'Default',\n    size = 'M',\n    fullWidth: fixed = false,\n    disabled = false,\n    ...rest\n  },\n  ref\n) {\n  return (\n    <StyledButton\n      {...rest}\n      disabled={disabled}\n      $background={variantToBackground(variant)}\n      $color={variantToFont(variant)}\n      $size={size}\n      $fullWidth={fixed}\n      ref={ref}\n    >\n      {children}\n    </StyledButton>\n  )\n})\nexport default Button\n\nconst horizontalPaddingSmall = css`\n  padding-right: 16px;\n  padding-left: 16px;\n`\nconst horizontalPaddingMedium = css`\n  padding-right: 24px;\n  padding-left: 24px;\n`\n\ntype StyledButtonProps = Omit<StyledProps, '$variant'> & {\n  $background: ReturnType<typeof variantToBackground>\n  $color: ReturnType<typeof variantToFont>\n}\nconst StyledButton = styled(Clickable)<StyledButtonProps>`\n  width: ${(p) => (p.$fullWidth ? 'stretch' : 'min-content')};\n  display: inline-grid;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  user-select: none;\n  white-space: nowrap;\n  border-radius: 999999px;\n  font-size: 14px;\n  line-height: 22px;\n  font-weight: bold;\n\n  ${(p) => (p.$size === 'M' ? horizontalPaddingMedium : horizontalPaddingSmall)}\n\n  color: var(--charcoal-${(p) => p.$color});\n  background-color: var(--charcoal-${(p) => p.$background});\n  transition: 0.2s color, 0.2s background-color, 0.2s box-shadow;\n\n  &:not(:disabled):not([aria-disabled]),\n  &[aria-disabled='false'] {\n    &:active,\n    &:focus,\n    &:focus-visible {\n      outline: none;\n      box-shadow: 0 0 0 4px rgba(0, 150, 250, 0.32);\n    }\n\n    &:hover {\n      color: var(--charcoal-${(p) => p.$color}-hover);\n      background-color: var(--charcoal-${(p) => p.$background}-hover);\n    }\n    &:active {\n      color: var(--charcoal-${(p) => p.$color}-press);\n      background-color: var(--charcoal-${(p) => p.$background}-press);\n    }\n  }\n\n  &:disabled,\n  &[aria-disabled]:not([aria-disabled='false']) {\n    opacity: 0.32;\n  }\n\n  /* よく考えたらheight=32って定義が存在しないな... */\n  height: ${(p) => (p.$size === 'M' ? 40 : 32)}px;\n`\n\nfunction variantToBackground(variant: Variant) {\n  switch (variant) {\n    case 'Overlay':\n      return 'surface4'\n    case 'Default':\n      return 'surface3'\n    case 'Primary':\n      return 'brand'\n    case 'Navigation':\n      return 'surface6'\n    case 'Danger':\n      return 'assertive'\n    default:\n      return unreachable(variant)\n  }\n}\n\nfunction variantToFont(variant: Variant) {\n  switch (variant) {\n    case 'Overlay':\n      return 'text5'\n    case 'Default':\n      return 'text2'\n    case 'Primary':\n      return 'text5'\n    case 'Navigation':\n      return 'text5'\n    case 'Danger':\n      return 'text5'\n    default:\n      return unreachable(variant)\n  }\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport {\n  LinkProps,\n  useComponentAbstraction,\n} from '../../core/ComponentAbstraction'\nimport { disabledSelector } from '@charcoal-ui/utils'\n\ninterface BaseProps {\n  /**\n   * クリックの無効化\n   */\n  disabled?: boolean\n}\n\ninterface LinkBaseProps {\n  /**\n   * リンクのURL。指定するとbuttonタグではなくaタグとして描画される\n   */\n  to: string\n}\n\nexport type ClickableProps =\n  | (BaseProps & Omit<React.ComponentPropsWithoutRef<'button'>, 'disabled'>)\n  | (BaseProps & LinkBaseProps & Omit<LinkProps, 'to'>)\nexport type ClickableElement = HTMLButtonElement & HTMLAnchorElement\n\nconst Clickable = React.forwardRef<ClickableElement, ClickableProps>(\n  function Clickable(props, ref) {\n    const { Link } = useComponentAbstraction()\n    const isLink = 'to' in props\n    const as = isLink ? Link : 'button'\n    const ariaDisabled = isLink && props.disabled === true ? true : undefined\n    let rest = props\n    if (isLink) {\n      const { disabled, ..._rest } = props\n      rest = _rest\n    }\n    return (\n      <StyledClickableDiv\n        {...rest}\n        ref={ref}\n        as={as}\n        aria-disabled={ariaDisabled}\n      />\n    )\n  }\n)\nexport default Clickable\n\nconst StyledClickableDiv = styled.div`\n  cursor: pointer;\n\n  ${disabledSelector} {\n    cursor: default;\n  }\n\n  /* Reset button appearance */\n  appearance: none;\n  background: transparent;\n  padding: 0;\n  border-style: none;\n  outline: none;\n  color: inherit;\n  text-rendering: inherit;\n  letter-spacing: inherit;\n  word-spacing: inherit;\n  text-decoration: none;\n\n  &:focus {\n    outline: none;\n  }\n\n  /* Change the font styles in all browsers. */\n  font: inherit;\n\n  /* Remove the margin in Firefox and Safari. */\n  margin: 0;\n\n  /* Show the overflow in Edge. */\n  overflow: visible;\n\n  /* Remove the inheritance of text transform in Firefox. */\n  text-transform: none;\n\n  /* Remove the inner border and padding in Firefox. */\n  &::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n`\n","import styled from 'styled-components'\nimport MenuItem, { MenuItemProps } from './MenuItem'\nimport { MenuListContext } from './MenuList/MenuListContext'\nimport { useContext } from 'react'\nimport { theme } from '../../styled'\nimport Icon from '../Icon'\n\nexport type DropdownMenuItemProps = Omit<MenuItemProps<'div'>, 'as'>\n\n/**\n * DropdownSelectorの選択肢として使うMenuItem\n */\nexport default function DropdownMenuItem(props: DropdownMenuItemProps) {\n  const { value: ctxValue } = useContext(MenuListContext)\n  const isSelected = props.value === ctxValue\n  const { children, ...rest } = props\n\n  return (\n    <MenuItem {...rest}>\n      {isSelected && <Text2ColorIcon name=\"16/Check\" />}\n      <StyledSpan isSelected={isSelected}>{props.children}</StyledSpan>\n    </MenuItem>\n  )\n}\n\n/**\n * アイコンがない時を考慮して20px（16pxのwidthと4pxのgap）の余白をとる\n */\nconst StyledSpan = styled.span<{ isSelected?: boolean }>`\n  ${theme((o) => [o.typography(14), o.font.text2])};\n  display: flex;\n  align-items: center;\n  width: 100%;\n  margin-left: ${({ isSelected }) => (isSelected === true ? 0 : 20)}px;\n`\n\nconst Text2ColorIcon = styled(Icon)`\n  ${theme((o) => [o.font.text2])}\n  padding-right: 4px;\n`\n","import { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { theme } from '../../../styled'\n\nexport type CustomJSXElement =\n  | keyof JSX.IntrinsicElements\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  | React.JSXElementConstructor<any>\n\nexport type ListItemProps<T extends CustomJSXElement = 'div'> = {\n  children?: ReactNode\n  as?: T\n} & Omit<React.ComponentProps<T>, 'children'>\n\n/**\n * リストのある要素を示すコンポーネント\n *\n * asを用いて拡張することができる\n * @example\n * ```\n * <ListItem as=\"a\" href=\"#\">Link</ListItem>\n * <ListItem as={NextLink} href=\"#\">NextLink</ListItem>\n * ```\n */\nexport default function ListItem<T extends CustomJSXElement = 'div'>(\n  props: ListItemProps<T>\n) {\n  const { children, ...rest } = props\n  return (\n    <StyledLi role=\"option\">\n      <ItemDiv {...rest}>{props.children}</ItemDiv>\n    </StyledLi>\n  )\n}\n\nconst StyledLi = styled.li`\n  list-style: none;\n`\n\nconst ItemDiv = styled.div`\n  display: flex;\n  align-items: center;\n  min-height: 40px;\n  cursor: pointer;\n  outline: none;\n\n  ${theme((o) => [o.padding.horizontal(16), o.disabled])}\n\n  &[aria-disabled=\"true\"] {\n    cursor: default;\n  }\n\n  :hover,\n  :focus,\n  :focus-within {\n    ${theme((o) => [o.bg.surface3])}\n  }\n`\n","import { RefObject, useContext, useRef } from 'react'\nimport { ReactNode } from 'react'\nimport { DismissButton, Overlay, usePopover } from '@react-aria/overlays'\nimport styled from 'styled-components'\nimport { theme } from '../../../styled'\nimport { ModalBackgroundContext } from '../../Modal/ModalBackgroundContext'\nimport { usePreventScroll } from './usePreventScroll'\n\nexport type PopoverProps = {\n  isOpen: boolean\n  onClose: () => void\n  children: ReactNode\n  triggerRef: RefObject<Element>\n  popoverRef?: RefObject<HTMLDivElement>\n}\n\nconst _empty = () => null\n\n/**\n * 画面の全面に動的に開くことができるコンテナ要素\n * 外の要素をクリックしたり、内部からフォーカスを移動した場合に自動的に閉じる\n *\n * triggerRefの付近に画面内に収まるように表示される\n */\nexport default function Popover(props: PopoverProps) {\n  const defaultPopoverRef = useRef<HTMLDivElement>(null)\n  const finalPopoverRef =\n    props.popoverRef === undefined ? defaultPopoverRef : props.popoverRef\n  const { popoverProps, underlayProps } = usePopover(\n    {\n      triggerRef: props.triggerRef,\n      popoverRef: finalPopoverRef,\n      containerPadding: 16,\n    },\n    {\n      close: props.onClose,\n      isOpen: props.isOpen,\n      // never used\n      open: _empty,\n      setOpen: _empty,\n      toggle: _empty,\n    }\n  )\n\n  const modalBackground = useContext(ModalBackgroundContext)\n  usePreventScroll(modalBackground, props.isOpen)\n\n  if (!props.isOpen) return null\n\n  return (\n    <Overlay portalContainer={document.body}>\n      <div\n        {...underlayProps}\n        style={{\n          position: 'fixed',\n          zIndex:\n            typeof popoverProps.style?.zIndex === 'number'\n              ? popoverProps.style.zIndex - 1\n              : 99999,\n          inset: 0,\n        }}\n      />\n      <DropdownPopoverDiv {...popoverProps} ref={finalPopoverRef}>\n        <DismissButton onDismiss={() => props.onClose()} />\n        {props.children}\n        <DismissButton onDismiss={() => props.onClose()} />\n      </DropdownPopoverDiv>\n    </Overlay>\n  )\n}\n\nconst DropdownPopoverDiv = styled.div`\n  margin: 4px 0;\n  list-style: none;\n  overflow: auto;\n  max-height: inherit;\n\n  ${theme((o) => [\n    o.bg.background1,\n    o.border.default,\n    o.borderRadius(8),\n    o.padding.vertical(8),\n  ])}\n`\n","import { ReactNode, useState, useRef } from 'react'\nimport styled from 'styled-components'\nimport { disabledSelector } from '@charcoal-ui/utils'\nimport Icon from '../Icon'\nimport FieldLabel from '../FieldLabel'\nimport { theme } from '../../styled'\nimport { DropdownPopover } from './DropdownPopover'\nimport { findPreviewRecursive } from './utils/findPreviewRecursive'\nimport MenuList, { MenuListChildren } from './MenuList'\n\nexport type DropdownSelectorProps = {\n  label: string\n  value: string\n  disabled?: boolean\n  placeholder?: string\n  showLabel?: boolean\n  invalid?: boolean\n  assistiveText?: string\n  required?: boolean\n  requiredText?: string\n  subLabel?: ReactNode\n  children: MenuListChildren\n  onChange: (value: string) => void\n}\n\nconst defaultRequiredText = '*必須'\n\nexport default function DropdownSelector(props: DropdownSelectorProps) {\n  const triggerRef = useRef<HTMLButtonElement>(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const preview = findPreviewRecursive(props.children, props.value)\n\n  return (\n    <DropdownSelectorRoot aria-disabled={props.disabled}>\n      {props.showLabel === true && (\n        <DropdownFieldLabel\n          label={props.label}\n          required={props.required}\n          requiredText={props.requiredText ?? defaultRequiredText}\n          subLabel={props.subLabel}\n        />\n      )}\n      <DropdownButton\n        invalid={props.invalid}\n        disabled={props.disabled}\n        onClick={() => {\n          if (props.disabled === true) return\n          setIsOpen(true)\n        }}\n        ref={triggerRef}\n        type=\"button\"\n      >\n        <DropdownButtonText>\n          {props.placeholder !== undefined && preview === undefined\n            ? props.placeholder\n            : preview}\n        </DropdownButtonText>\n        <DropdownButtonIcon name=\"16/Menu\" />\n      </DropdownButton>\n      {isOpen && (\n        <DropdownPopover\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n          triggerRef={triggerRef}\n          value={props.value}\n        >\n          <MenuList\n            value={props.value}\n            onChange={(v) => {\n              props.onChange(v)\n              setIsOpen(false)\n            }}\n          >\n            {props.children}\n          </MenuList>\n        </DropdownPopover>\n      )}\n      {props.assistiveText !== undefined && (\n        <AssertiveText invalid={props.invalid}>\n          {props.assistiveText}\n        </AssertiveText>\n      )}\n    </DropdownSelectorRoot>\n  )\n}\n\nconst DropdownSelectorRoot = styled.div`\n  display: inline-block;\n  width: 100%;\n\n  ${disabledSelector} {\n    cursor: default;\n    ${theme((o) => o.disabled)}\n  }\n`\n\nconst DropdownFieldLabel = styled(FieldLabel)`\n  width: 100%;\n\n  ${theme((o) => o.margin.bottom(8))}\n`\n\nconst DropdownButton = styled.button<{ invalid?: boolean }>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  height: 40px;\n  width: 100%;\n  box-sizing: border-box;\n  border: none;\n  cursor: pointer;\n\n  ${disabledSelector} {\n    cursor: default;\n  }\n\n  ${({ invalid }) =>\n    theme((o) => [\n      o.padding.horizontal(8),\n      o.outline.default.focus,\n      o.bg.surface3,\n      o.borderRadius(4),\n      invalid === true && o.outline.assertive,\n    ])}\n`\n\nconst DropdownButtonText = styled.span`\n  text-align: left;\n\n  ${theme((o) => [o.typography(14), o.font.text2])}\n`\n\nconst DropdownButtonIcon = styled(Icon)`\n  ${theme((o) => [o.font.text2])}\n`\n\nconst AssertiveText = styled.div<{ invalid?: boolean }>`\n  ${({ invalid }) =>\n    theme((o) => [\n      o.typography(14),\n      o.margin.top(8),\n      invalid === true ? o.font.assertive : o.font.text2,\n    ])}\n`\n","import * as React from 'react'\nimport styled from 'styled-components'\n\nexport interface FieldLabelProps\n  extends React.LabelHTMLAttributes<HTMLLabelElement> {\n  readonly className?: string\n  readonly label: string\n  readonly subLabel?: React.ReactNode\n  readonly required?: boolean\n  // TODO: 翻訳用のContextで注入する\n  readonly requiredText?: string\n}\n\nconst FieldLabel = React.forwardRef<HTMLLabelElement, FieldLabelProps>(\n  function FieldLabel(\n    {\n      style,\n      className,\n      label,\n      required = false,\n      requiredText,\n      subLabel,\n      ...labelProps\n    },\n    ref\n  ) {\n    return (\n      <FieldLabelWrapper style={style} className={className}>\n        <Label ref={ref} {...labelProps}>\n          {label}\n        </Label>\n        {required && <RequiredText>{requiredText}</RequiredText>}\n        <SubLabelClickable>\n          <span>{subLabel}</span>\n        </SubLabelClickable>\n      </FieldLabelWrapper>\n    )\n  }\n)\n\nexport default FieldLabel\n\nconst Label = styled.label`\n  font-size: 14px;\n  line-height: 22px;\n  font-weight: bold;\n  display: flow-root;\n  color: var(--charcoal-text1);\n\n  &::before {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-top: -4px;\n  }\n  &::after {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-bottom: -4px;\n  }\n`\n\nconst RequiredText = styled.span`\n  font-size: 14px;\n  line-height: 22px;\n  display: flow-root;\n  color: var(--charcoal-text2);\n\n  &::before {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-top: -4px;\n  }\n  &::after {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-bottom: -4px;\n  }\n`\n\nconst SubLabelClickable = styled.div`\n  font-size: 14px;\n  line-height: 22px;\n  display: flow-root;\n  color: var(--charcoal-text3);\n  transition: 0.2s color, 0.2s box-shadow;\n\n  &::before {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-top: -4px;\n  }\n  &::after {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-bottom: -4px;\n  }\n\n  &:not(:disabled):not([aria-disabled]),\n  &[aria-disabled='false'] {\n    &:hover {\n      color: var(--charcoal-text3-hover);\n    }\n    &:active {\n      color: var(--charcoal-text3-press);\n    }\n    &:active,\n    &:focus,\n    &:focus-visible {\n      outline: none;\n      box-shadow: 0 0 0 4px rgba(0, 150, 250, 0.32);\n    }\n  }\n`\n\nconst FieldLabelWrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n\n  > ${RequiredText} {\n    margin-left: 4px;\n  }\n\n  > ${SubLabelClickable} {\n    margin-left: auto;\n  }\n`\n","import { forwardRef } from 'react'\nimport styled from 'styled-components'\nimport Clickable, { ClickableElement, ClickableProps } from '../Clickable'\nimport type { KnownIconType } from '@charcoal-ui/icons'\n\ntype Variant = 'Default' | 'Overlay'\ntype Size = 'XS' | 'S' | 'M'\n\ninterface StyledProps {\n  readonly variant?: Variant\n  readonly size?: Size\n  readonly icon: keyof KnownIconType\n}\n\nexport type IconButtonProps = StyledProps & ClickableProps\n\nconst IconButton = forwardRef<ClickableElement, IconButtonProps>(\n  function IconButtonInner(\n    { variant = 'Default', size = 'M', icon, ...rest }: IconButtonProps,\n    ref\n  ) {\n    validateIconSize(size, icon)\n    return (\n      <StyledIconButton {...rest} ref={ref} $size={size} $variant={variant}>\n        <pixiv-icon name={icon} />\n      </StyledIconButton>\n    )\n  }\n)\n\nexport default IconButton\n\ntype StyledIconButtonProps = Required<{\n  [key in keyof Pick<\n    StyledProps,\n    'size' | 'variant'\n  > as `$${key}`]: StyledProps[key]\n}>\n\nconst StyledIconButton = styled(Clickable).attrs<\n  StyledIconButtonProps,\n  ReturnType<typeof styledProps>\n>(styledProps)<StyledIconButtonProps>`\n  user-select: none;\n\n  width: ${(p) => p.$width}px;\n  height: ${(p) => p.$height}px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(${({ $font }) => `--charcoal-${$font}`});\n  background-color: var(${({ $background }) => `--charcoal-${$background}`});\n  border-radius: 999999px;\n  transition: 0.2s background-color, 0.2s box-shadow;\n\n  &:not(:disabled):not([aria-disabled]),\n  &[aria-disabled='false'] {\n    &:hover {\n      background-color: var(\n        ${({ $background }) => `--charcoal-${$background}-hover`}\n      );\n    }\n    &:active {\n      background-color: var(\n        ${({ $background }) => `--charcoal-${$background}-press`}\n      );\n    }\n    &:focus,\n    &:active,\n    &:focus-visible {\n      outline: none;\n      box-shadow: 0 0 0 4px rgba(0, 150, 250, 0.32);\n    }\n  }\n\n  &:disabled,\n  &[aria-disabled]:not([aria-disabled='false']) {\n    opacity: 0.32;\n  }\n`\n\nfunction styledProps({ $size, $variant }: StyledIconButtonProps) {\n  return {\n    ...variantToProps($variant),\n    ...sizeToProps($size),\n  }\n}\n\nfunction variantToProps(variant: Variant) {\n  switch (variant) {\n    case 'Default':\n      return { $font: 'text3', $background: 'transparent' } as const\n    case 'Overlay':\n      return { $font: 'text5', $background: 'surface4' } as const\n  }\n}\n\nfunction sizeToProps(size: Size) {\n  switch (size) {\n    case 'XS':\n      return {\n        $width: 20,\n        $height: 20,\n      }\n    case 'S':\n      return {\n        $width: 32,\n        $height: 32,\n      }\n    case 'M':\n      return {\n        $width: 40,\n        $height: 40,\n      }\n  }\n}\n\n/**\n * validates matches of size and icon\n */\nfunction validateIconSize(size: Size, icon: keyof KnownIconType) {\n  let requiredIconSize: string\n  switch (size) {\n    case 'XS':\n      requiredIconSize = '16'\n      break\n    case 'S':\n    case 'M':\n      requiredIconSize = '24'\n      break\n  }\n  // アイコン名は サイズ/名前\n  const result = /^\\d*/u.exec(icon)\n  if (result == null) {\n    throw new Error('Invalid icon name')\n  }\n  const [iconSize] = result\n  if (iconSize !== requiredIconSize) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `IconButton with size \"${size}\" expect icon size \"${requiredIconSize}, but got \"${iconSize}\"`\n    )\n  }\n}\n","import { BottomSheet, ModalContext, ModalTitle } from '.'\nimport styled, { css } from 'styled-components'\nimport { useContext } from 'react'\nimport { maxWidth } from '@charcoal-ui/utils'\n\nexport function ModalHeader() {\n  const modalCtx = useContext(ModalContext)\n  return (\n    <ModalHeaderRoot $bottomSheet={modalCtx.bottomSheet}>\n      <StyledModalTitle />\n    </ModalHeaderRoot>\n  )\n}\n\nconst ModalHeaderRoot = styled.div<{\n  $bottomSheet: BottomSheet\n}>`\n  height: 64px;\n  display: grid;\n  align-content: center;\n  justify-content: center;\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    ${(p) =>\n      p.$bottomSheet !== false &&\n      css`\n        height: 48px;\n      `}\n  }\n`\n\nconst StyledModalTitle = styled(ModalTitle)`\n  color: var(--charcoal-text1);\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: bold;\n  display: flow-root;\n\n  &::before {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-top: -4px;\n  }\n  &::after {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-bottom: -4px;\n  }\n`\n\nexport const ModalAlign = styled.div`\n  padding-left: 16px;\n  padding-right: 16px;\n`\n\nexport const ModalBody = styled.div`\n  padding-bottom: 40px;\n`\n\nexport const ModalButtons = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-row-gap: 8px;\n\n  padding-top: 16px;\n  padding-left: 16px;\n  padding-right: 16px;\n`\n","import { forwardRef } from 'react'\nimport * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport { useDialog } from '@react-aria/dialog'\nimport { columnSystem, COLUMN_UNIT, GUTTER_UNIT } from '@charcoal-ui/foundation'\nimport { unreachable } from '../../../_lib'\nimport { maxWidth } from '@charcoal-ui/utils'\nimport { animated } from 'react-spring'\nimport { useForwardedRef } from '../../../_lib/useForwardedRef'\nimport { Size, BottomSheet } from '..'\n\nexport const Dialog = forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof AnimatedStyledDialogDiv>\n>(function Dialog(props, forwardRef) {\n  const ref = useForwardedRef(forwardRef)\n  const { dialogProps } = useDialog(\n    {\n      role: 'dialog',\n    },\n    ref\n  )\n\n  return (\n    <AnimatedStyledDialogDiv\n      {...props}\n      role={dialogProps.role}\n      tabIndex={dialogProps.tabIndex}\n      aria-labelledby={dialogProps['aria-labelledby']}\n      onBlur={dialogProps.onBlur}\n      ref={ref}\n    />\n  )\n})\n\nconst AnimatedStyledDialogDiv = animated(styled.div<{\n  size: Size\n  bottomSheet: BottomSheet\n}>`\n  margin: auto;\n  position: relative;\n  height: fit-content;\n  width: ${(p) => {\n    switch (p.size) {\n      case 'S': {\n        return columnSystem(3, COLUMN_UNIT, GUTTER_UNIT) + GUTTER_UNIT * 2\n      }\n      case 'M': {\n        return columnSystem(4, COLUMN_UNIT, GUTTER_UNIT) + GUTTER_UNIT * 2\n      }\n      case 'L': {\n        return columnSystem(6, COLUMN_UNIT, GUTTER_UNIT) + GUTTER_UNIT * 2\n      }\n      default: {\n        return unreachable(p.size)\n      }\n    }\n  }}px;\n\n  background-color: var(--charcoal-surface1);\n  border-radius: 24px;\n\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    max-width: 440px;\n    width: calc(100% - 48px);\n    ${(p) =>\n      p.bottomSheet !== false &&\n      css`\n        max-width: unset;\n        width: 100%;\n        border-radius: 0;\n        margin: auto 0 0 0;\n        ${p.bottomSheet === 'full' &&\n        css`\n          min-height: 100%;\n        `}\n      `}\n  }\n  :focus {\n    outline: none;\n  }\n`)\n","import { useContext, forwardRef, memo } from 'react'\nimport * as React from 'react'\nimport {\n  AriaModalOverlayProps,\n  Overlay,\n  useModalOverlay,\n} from '@react-aria/overlays'\nimport styled, { css, useTheme } from 'styled-components'\nimport { AriaDialogProps } from '@react-types/dialog'\nimport { maxWidth } from '@charcoal-ui/utils'\nimport { useMedia } from '@charcoal-ui/styled'\nimport { animated, useTransition, easings } from 'react-spring'\nimport Button, { ButtonProps } from '../Button'\nimport IconButton from '../IconButton'\nimport { useObjectRef } from '@react-aria/utils'\nimport { Dialog } from './Dialog'\nimport { ModalBackgroundContext } from './ModalBackgroundContext'\n\nexport type BottomSheet = boolean | 'full'\nexport type Size = 'S' | 'M' | 'L'\n\nexport type ModalProps = AriaModalOverlayProps &\n  AriaDialogProps & {\n    children: React.ReactNode\n    zIndex?: number\n    title: string\n    size?: Size\n    bottomSheet?: BottomSheet\n    isOpen: boolean\n    onClose: () => void\n    className?: string\n\n    /**\n     * https://github.com/adobe/react-spectrum/issues/3787\n     * Next.jsで使用する際に発生するエラーの一時的な回避策でdocument.bodyを指定する必要がある\n     */\n    portalContainer?: HTMLElement\n  }\n\nconst DEFAULT_Z_INDEX = 10\n\n/**\n * モーダルコンポーネント。\n *\n * @example アプリケーションルートで `<OverlayProvider>` ないし `<CharcoalProvider>` で囲った上で利用する\n * ```tsx\n * import {\n *   OverlayProvider,\n *   Modal,\n *   ModalHeader,\n *   ModalBody,\n *   ModalButtons\n * } from '@charcoal-ui/react'\n *\n * <OverlayProvider>\n *   <App>\n *     <Modal title=\"Title\" isOpen={state.isOpen} onClose={() => state.close()} isDismissable>\n *       <ModalHeader />\n *       <ModalBody>\n *         ...\n *         <ModalButtons>...</ModalButtons>\n *       </ModalBody>\n *     </Modal>\n *   </App>\n * </OverlayProvider>\n * ```\n */\nconst Modal = forwardRef<HTMLDivElement, ModalProps>(function ModalInner(\n  { children, zIndex = DEFAULT_Z_INDEX, portalContainer, ...props },\n  external\n) {\n  const {\n    title,\n    size = 'M',\n    bottomSheet = false,\n    isDismissable,\n    onClose,\n    className,\n    isOpen = false,\n  } = props\n\n  const ref = useObjectRef<HTMLDivElement>(external)\n\n  const { modalProps, underlayProps } = useModalOverlay(\n    props,\n    {\n      close: onClose,\n      isOpen: isOpen,\n      // these props are not used actually.\n      // https://github.com/adobe/react-spectrum/blob/df14e3fb129b94b310f0397a701b83f006b51dfe/packages/%40react-aria/overlays/src/useModalOverlay.ts\n      open: () => {\n        // nope\n      },\n      setOpen: () => {\n        // nope\n      },\n      toggle: () => {\n        // nope\n      },\n    },\n    ref\n  )\n\n  const theme = useTheme()\n  const isMobile = useMedia(maxWidth(theme.breakpoint.screen1)) ?? false\n  const transitionEnabled = isMobile && bottomSheet !== false\n  const showDismiss = !isMobile || bottomSheet !== true\n\n  const transition = useTransition(isOpen, {\n    from: {\n      transform: 'translateY(100%)',\n      backgroundColor: 'rgba(0, 0, 0, 0)',\n      overflow: 'hidden',\n    },\n    enter: {\n      transform: 'translateY(0%)',\n      backgroundColor: 'rgba(0, 0, 0, 0.4)',\n    },\n    update: {\n      overflow: 'auto',\n    },\n    leave: {\n      transform: 'translateY(100%)',\n      backgroundColor: 'rgba(0, 0, 0, 0)',\n      overflow: 'hidden',\n    },\n    config: transitionEnabled\n      ? { duration: 400, easing: easings.easeOutQuart }\n      : { duration: 0 },\n  })\n\n  const bgRef = React.useRef<HTMLElement>(null)\n\n  return transition(\n    ({ backgroundColor, overflow, transform }, item) =>\n      item && (\n        <Overlay portalContainer={portalContainer}>\n          <ModalBackground\n            ref={bgRef}\n            zIndex={zIndex}\n            {...underlayProps}\n            style={transitionEnabled ? { backgroundColor, overflow } : {}}\n            $bottomSheet={bottomSheet}\n          >\n            <ModalBackgroundContext.Provider value={bgRef.current}>\n              <Dialog\n                ref={ref}\n                {...modalProps}\n                style={transitionEnabled ? { transform } : {}}\n                size={size}\n                bottomSheet={bottomSheet}\n                className={className}\n              >\n                <ModalContext.Provider\n                  value={{\n                    titleProps: {},\n                    title,\n                    close: onClose,\n                    showDismiss,\n                    bottomSheet,\n                  }}\n                >\n                  {children}\n                  {isDismissable === true && (\n                    <ModalCrossButton\n                      size=\"S\"\n                      icon=\"24/Close\"\n                      onClick={onClose}\n                    />\n                  )}\n                </ModalContext.Provider>\n              </Dialog>\n            </ModalBackgroundContext.Provider>\n          </ModalBackground>\n        </Overlay>\n      )\n  )\n})\n\nexport default memo(Modal)\n\nexport const ModalContext = React.createContext<{\n  /**\n   * @deprecated\n   */\n  titleProps: React.HTMLAttributes<HTMLElement>\n  title: string\n  close?: () => void\n  showDismiss: boolean\n  bottomSheet: BottomSheet\n}>({\n  titleProps: {},\n  title: '',\n  close: undefined,\n  showDismiss: true,\n  bottomSheet: false,\n})\n\nconst ModalBackground = animated(styled.div<{\n  zIndex: number\n  $bottomSheet: BottomSheet\n}>`\n  z-index: ${({ zIndex }) => zIndex};\n  overflow: auto;\n  display: flex;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: -webkit-fill-available;\n  width: -moz-available;\n  height: 100%;\n  justify-content: center;\n  padding: 40px 0;\n  box-sizing: border-box;\n\n  background-color: var(--charcoal-surface4);\n\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    ${(p) =>\n      p.$bottomSheet !== false &&\n      css`\n        padding: 0;\n      `}\n  }\n`)\n\nconst ModalCrossButton = styled(IconButton)`\n  position: absolute;\n  top: 8px;\n  right: 8px;\n\n  color: var(--charcoal-text3);\n  transition: 0.2s color;\n\n  &:not(:disabled):not([aria-disabled]),\n  &[aria-disabled='false'] {\n    &:hover {\n      color: var(--charcoal-text3-hover);\n    }\n    &:active {\n      color: var(--charcoal-text3-press);\n    }\n  }\n`\n\nexport function ModalTitle(props: React.HTMLAttributes<HTMLHeadingElement>) {\n  const { titleProps, title } = useContext(ModalContext)\n  return (\n    <ModalHeading {...titleProps} {...props}>\n      {title}\n    </ModalHeading>\n  )\n}\n\nconst ModalHeading = styled.h3`\n  margin: 0;\n  font-weight: inherit;\n  font-size: inherit;\n`\n\nexport function ModalDismissButton({ children, ...props }: ButtonProps) {\n  const { close, showDismiss } = useContext(ModalContext)\n\n  if (!showDismiss) {\n    return null\n  }\n\n  return (\n    <Button {...props} onClick={close} fullWidth>\n      {children}\n    </Button>\n  )\n}\n"],"names":[],"sourceRoot":""}