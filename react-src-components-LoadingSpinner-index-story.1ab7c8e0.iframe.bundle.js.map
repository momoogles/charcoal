{"version":3,"file":"react-src-components-LoadingSpinner-index-story.1ab7c8e0.iframe.bundle.js","mappings":";;;AAsCA;;AAEA;AACA;AACA;;;AAGA;AAIA;;;;;;;;;;AAYA;;;;;AAKA;AACA;;;;;AAeA","sources":["webpack://charcoal-ui/./packages/react/src/components/LoadingSpinner/index.tsx"],"sourcesContent":["import { forwardRef, useImperativeHandle, useRef, memo } from 'react'\nimport styled, { keyframes } from 'styled-components'\n\nexport type LoadingSpinnerProps = {\n  readonly size?: number\n  readonly padding?: number\n  readonly transparent?: boolean\n  readonly className?: string\n}\n\nconst LoadingSpinner = forwardRef<HTMLDivElement, LoadingSpinnerProps>(\n  function LoadingSpinnerInner(\n    { size = 48, padding = 16, transparent = false, className },\n    ref\n  ) {\n    return (\n      <LoadingSpinnerRoot\n        size={size}\n        padding={padding}\n        transparent={transparent}\n        className={className}\n        ref={ref}\n      >\n        <LoadingSpinnerIcon />\n      </LoadingSpinnerRoot>\n    )\n  }\n)\n\nexport default memo(LoadingSpinner)\n\nconst LoadingSpinnerRoot = styled.div.attrs({ role: 'progressbar' })<{\n  size: number\n  padding: number\n  transparent: boolean\n}>`\n  box-sizing: content-box;\n  margin: auto;\n  padding: ${(props) => props.padding}px;\n  border-radius: 8px;\n  font-size: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  opacity: 0.84;\n  color: var(--charcoal-text4);\n  background-color: ${({ transparent }) =>\n    `var(--charcoal-${transparent ? 'transparent' : 'background1'})`};\n`\n\nconst scaleOut = keyframes`\n  from {\n    transform: scale(0);\n    opacity: 1;\n  }\n\n  to {\n    transform: scale(1);\n    opacity: 0;\n  }\n`\n\nconst Icon = styled.div.attrs({ role: 'presentation' })<{ once: boolean }>`\n  width: 1em;\n  height: 1em;\n  border-radius: 1em;\n  background-color: currentColor;\n  animation: ${scaleOut} 1s both ease-out;\n  animation-iteration-count: ${(p) => (p.once ? 1 : 'infinite')};\n\n  &[data-reset-animation] {\n    animation: none;\n  }\n`\n\ninterface Props {\n  once?: boolean\n}\n\nexport interface LoadingSpinnerIconHandler {\n  restart(): void\n}\n\nexport const LoadingSpinnerIcon = forwardRef<LoadingSpinnerIconHandler, Props>(\n  function LoadingSpinnerIcon({ once = false }, ref) {\n    const iconRef = useRef<HTMLDivElement>(null)\n\n    useImperativeHandle(ref, () => ({\n      restart: () => {\n        if (!iconRef.current) {\n          return\n        }\n        iconRef.current.dataset.resetAnimation = 'true'\n        // Force reflow hack!\n        void iconRef.current.offsetWidth\n        delete iconRef.current.dataset.resetAnimation\n      },\n    }))\n\n    return <Icon ref={iconRef} once={once} />\n  }\n)\n"],"names":[],"sourceRoot":""}